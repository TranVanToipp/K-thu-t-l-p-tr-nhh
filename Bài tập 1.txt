




















Slides © Marty Hall, http://www.coreservlets.com, books © Sun Microsystems Press 
Jakarta Struts:
DispatchAction and Other 
Advanced Action Classes
Struts 1.2 Version
Core Servlets & JSP book: www.coreservlets.com
More Servlets & JSP book: www.moreservlets.com
Servlet, JSP, Struts, JSF, and Java Training Courses: 
courses.coreservlets.com
Slides © Marty Hall, http://www.coreservlets.com, books © Sun Microsystems Press 
For live Struts training, please see 
JSP/servlet/Struts/JSF training courses at 
http://courses.coreservlets.com/.
Taught by the author of Core Servlets and JSP, More 
Servlets and JSP, and this tutorial. Available at public 
venues, or customized versions can be held on-site at 
your organization.5 Apache Struts: Advanced Actions www.coreservlets.com
Agenda
• Performing different logic based on a radio 
button, hidden field, or push button value
– But not repeatedly checking parameter names in the 
execute method
– Using DispatchAction
• Using Struts form-bean capabilities in nonStruts applications
– Without redoing code in Struts
– Using ForwardAction
• Other advanced Action subclasses
Slides © Marty Hall, http://www.coreservlets.com, books © Sun Microsystems Press 
DispatchAction
Grouping Related Operations7 Apache Struts: Advanced Actions www.coreservlets.com
DispatchAction
• Scenario
– The same form should result in substantially different 
logic depending on whether certain radio buttons were 
chosen, or depending on which submit button was 
pressed
• But, in HTML, one form has one ACTION
– Several actions share similar or identical helper methods
• Problems
– Tedious and repetitive checking of parameters just to 
know what real method to invoke
• Form bean must have getter/setters for the radio button
• Goal 
– Automate the dispatch logic (decision re which method 
applies), based on struts-config.xml
8 Apache Struts: Advanced Actions www.coreservlets.com
Example 
(Radio button named "operation")
public ActionForward execute (ActionMapping mapping,
ActionForm form,
HttpServletRequest request,
HttpServletResponse response)
throws Exception {
UserFormBean formBean = (UserFormBean)form;
if (radioButtonMatches(formBean, "createAccount")) {
return(createAccount(mapping, formBean, request, response));
} else if (radioButtonMatches(formBean, "changePassword")) {
return(changePassword(mapping, formBean, request, 
response));
} else if (radioButtonMatches(formBean, "deleteAccount")) {
return(deleteAccount(mapping, formBean, request, response));
} else {
return(makeErrorMessage());
}
}
private boolean radioButtonMatches(UserFormBean formBean,
String value) {
String operation = formBean.getOperation();
return((operation != null) && operation.equals(value));
}9 Apache Struts: Advanced Actions www.coreservlets.com
Using DispatchAction
• Use struts-config.xml to list the parameter 
used to determine which method will be called
– Use the parameter attribute of action
<action path="..." type="..." parameter="operation">
• Extend DispatchAction instead of Action
– Directly implement desired methods
• Omit the execute method entirely
• Custom methods have same signature as execute
– Note package is ...struts.actions, not ...struts.action
• In form, supply parameter with given name
– Value should be the name of the method that applies
<INPUT TYPE="RADIO" NAME="operation" 
VALUE="createAccount">
• Form bean needs no setters for button
10 Apache Struts: Advanced Actions www.coreservlets.com
Example: Outline
• Perform different operations depending on 
which radio button is selected
• Use same basic Action class in all cases11 Apache Struts: Advanced Actions www.coreservlets.com
Struts Flow of Control
JSP
Form
Determine
Action
Action
Choose
JSP
Page
JSP
request .../SomeForm.jsp
submit form
request .../blah.do
invoke
method
designated 
by special 
parameter
return condition
forward to return final result
struts-config.xml Populate bean based 
on request parameters. 
Supply as second 
argument to methods.
Use bean:write 
to output bean 
properties.
12 Apache Struts: Advanced Actions www.coreservlets.com
Struts Flow of Control
• The user requests a form
– The form has radio button, push button, or hidden field with a special 
name, and whose values correspond to method names
• The form is submitted to a URL of the form blah.do. 
– That address is mapped by struts-config.xml to an Action class
• The designated method of the Action object is invoked 
– The method is selected based on the special form parameter
– One of the arguments to execute is a form bean that is automatically 
created and whose properties are automatically populated based on 
incoming request parameters of the same name
– The Action object then invokes business logic and data-access logic, 
placing the results in normal beans stored in request, session, or application 
scope. 
– The Action uses mapping.findForward to return a condition, and the 
conditions are mapped by struts-config.xml to various JSP pages. 
• Struts forwards request to the appropriate JSP page
– The page can use bean:write or the JSP 2.0 EL to output bean properties
– The page can use bean:message to output fixed strings 13 Apache Struts: Advanced Actions www.coreservlets.com
New Capabilities
• The form has a special parameter
– The possible values correspond to method names
• The parameter is declared in struts-config.xml
– With a parameter entry in the action element 
• The form bean needs no setter method for the 
special parameter
– For html:radio and most other html: tags, getter is needed
– Otherwise, form bean defined and declared normally
• Extend DispatchAction instead of Action
– No execute method
– One method for each possible value of the special 
parameter
• These methods have same signature as execute
14 Apache Struts: Advanced Actions www.coreservlets.com
The Six Basic Steps in Using 
Struts: Updates for Bean Use
1. Modify struts-config.xml. 
Use WEB-INF/struts-config.xml to: 
– Map incoming .do addresses to Action classes 
– Map return conditions to JSP pages 
– Declare any form beans that are being used
– List special param via parameter entry in action
– Restart server after modifying struts-config.xml
2. Define a form bean.
– This bean extends ActionForm and represents the data 
submitted by the user. It is automatically populated 
when the input form is submitted. 
• The getter needed for this special parameter determines which 
radio button is initially selected
• No setter needed for this special parameter15 Apache Struts: Advanced Actions www.coreservlets.com
The Six Basic Steps in Using 
Struts: Updates for Bean Use
3. Create results beans.
– These are normal beans of the sort used in MVC when 
implemented directly with RequestDispatcher. That is, 
they represent the results of the business logic and data 
access code. These beans are stored in request, session, 
or application scope. 
4. Define a DispatchAction class to handle 
requests.
– Omit the execute method
– Define a method named for each possible method of the 
special parameter
• Same signature as the execute method
– The system will call that method automatically
16 Apache Struts: Advanced Actions www.coreservlets.com
The Six Basic Steps in Using 
Struts: Updates for Bean Use
5. Create form that invokes blah.do.
– Use html:form to associate bean properties with input 
elements
• Keeps textfield names in synch with bean property names
• Allows form prepopulation
• Allows form redisplay
– Optionally use bean:message to output standard 
prompts 
6. Display results in JSP.
– The JSP page uses the bean:write tag to output 
properties of the form and result beans. 
– The page may also use bean:message. 17 Apache Struts: Advanced Actions www.coreservlets.com
Step 1 
(Modify struts-config.xml)
<struts-config>
<action-mappings>
<form-beans>
<form-bean name="userFormBean"
type="coreservlets.UserFormBean"/>
</form-beans>
<action path="/accountMod" 
type="coreservlets.ModifyAccountAction"
parameter="operation">
<forward name="create-failed" 
path="/WEB-INF/results/create-failed.jsp"/>
<forward name="create-success" 
path="/WEB-INF/results/create-confirm.jsp"/>
<forward name="change-failed" 
path="/WEB-INF/results/change-failed.jsp"/>
<forward name="change-success" 
path="/WEB-INF/results/change-confirm.jsp"/>
<forward name="delete-failed" 
path="/WEB-INF/results/delete-failed.jsp"/>
<forward name="delete-success" 
path="/WEB-INF/results/delete-confirm.jsp"/>
</action>
</action-mappings>
</struts-config>
18 Apache Struts: Advanced Actions www.coreservlets.com
Step 2 (Define a Form Bean)
package coreservlets;
import org.apache.struts.action.*;
public class UserFormBean extends ActionForm {
private String email = "";
private String password = "";
private String operation="createAccount";
public String getEmail() { return(email); }
public void setEmail(String email) {
this.email = email;
}
...
public String getOperation() {
return(operation);
}
}19 Apache Struts: Advanced Actions www.coreservlets.com
Step 3 (Define Results Beans)
• Omitted in this simple example
20 Apache Struts: Advanced Actions www.coreservlets.com
Step 4 (Define a DispatchAction 
Class to Handle Requests)
package coreservlets;
import javax.servlet.http.*;
import org.apache.struts.action.*; 
import org.apache.struts.actions.*;
public class ModifyAccountAction 
extends DispatchAction {21 Apache Struts: Advanced Actions www.coreservlets.com
Example: DispatchAction Code
(Continued)
public ActionForward createAccount
(ActionMapping mapping,
ActionForm form,
HttpServletRequest request,
HttpServletResponse response)
throws Exception {
if (isComplexBusinessLogicSuccessful("create")) {
return(mapping.findForward("create-success"));
} else {
return(mapping.findForward("create-failed"));
}
}
public ActionForward changePassword(...) {...}
public ActionForward deleteAccount(...) {...}
private boolean isComplexBusinessLogicSuccessful
(String type) {
return(Math.random() > 0.5);
}
}
22 Apache Struts: Advanced Actions www.coreservlets.com
Step 5 (Create Form that Invokes 
blah.do)
<%@ taglib uri="http://struts.apache.org/tags-html"
prefix="html" %>
<html:form action="/accountMod">
Email address: <html:text property="email"/><BR>
Password: <html:password property="password"/><BR>
<TABLE CELLSPACING="10">
<TR>
<TD><html:radio property="operation"
value="createAccount"/>
Create Account</TD>
<TD><html:radio property="operation"
value="changePassword"/>
Change Password</TD>
<TD><html:radio property="operation"
value="deleteAccount"/>
Delete Account</TD>
</TR>
</TABLE>
<html:submit value="Perform Selected Operation"/>
</html:form>23 Apache Struts: Advanced Actions www.coreservlets.com
Step 6 (Display Results in JSP)
• WEB-INF/results/create-confirm.jsp
<%@ taglib uri="http://struts.apache.org/tags-bean" 
prefix="bean" %>
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Account Created</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Account successfully created for
<bean:write name="userFormBean" property="email"/>.</H1>
Congratulations.
</CENTER>
</BODY></HTML>
24 Apache Struts: Advanced Actions www.coreservlets.com
Results (Initial Form)25 Apache Struts: Advanced Actions www.coreservlets.com
Results (Account Creation)
26 Apache Struts: Advanced Actions www.coreservlets.com
Results (Password Change)27 Apache Struts: Advanced Actions www.coreservlets.com
Results (Account Deletion)
28 Apache Struts: Advanced Actions www.coreservlets.com
More Details on DispatchAction
• Using DispatchAction for different forms
– Motivation: different forms with similar actions
• Have the different forms use hidden fields whose name matches 
the specified parameter and whose value designates the method 
• Using push buttons instead of radio buttons
– Conceptually, it seems the same. Problem: push button 
values are displayed to the user as the button labels
• You don't want the labels to have to match the method names
– Solution: override getMethodName.
• This method maps parameter values to method names
• But fails in I18N apps where button labels come from properties 
file, so LookupDispatchAction needed in this complex case
• Handling unmatched values
– E.g., users might submit without selecting a radio button
• This automatically invokes a method named unspecifiedSlides © Marty Hall, http://www.coreservlets.com, books © Sun Microsystems Press 
ForwardAction
Using Form Beans with
Non-Struts MVC Apps
30 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction
• Scenario
– You already have MVC-based servlet/JSP combo that 
uses beans
• Repeated calls to request.getParameter in servlet
– You already have standalone JSP page that uses beans
• Scripting elements or jsp:setProperty
• Problems
– Tedious and repetitive reading of request parameters and 
setting of bean properties
– Not yet ready to redo code in Struts
• Goal 
– Use Struts form beans facility, but keep basic servlet/JSP 
structure in place31 Apache Struts: Advanced Actions www.coreservlets.com
Steps in Using ForwardAction
• Change bean
– Need to extend ActionForm
– Do not need to implement Serializable
– Do not need to check for null and empty strings
• Change servlet
– Do not need to create bean or check 
Request/Session/Application for null
– Do not need to call request.getParameter
• Change form
– ACTION should refer to blah.do
32 Apache Struts: Advanced Actions www.coreservlets.com
Steps in Using ForwardAction
(Continued)
• Declare bean in struts-config.xml
– Same as with a normal form bean
• Declare action in struts-config.xml
<action path="/blah" 
type="org.apache.struts.actions.ForwardAction"
name="bean-name"
scope="request-session-or-application"
parameter="/path-to-servlet"/>33 Apache Struts: Advanced Actions www.coreservlets.com
Example: Preferred Colors
(Session Scoped)
• User can specify preferred foreground and 
background colors
– If no color specified, previous choice used
– If no colors given previously, defaults are used
• Uses MVC 
– Servlet uses RequestDispatcher
– Result page uses JSP 2.0 expression language
34 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Bean
package coreservlets;
import java.io.Serializable;
public class ColorBean1 implements Serializable {
private String foregroundColor = "BLACK";
private String backgroundColor = "WHITE";
public String getForegroundColor() {
return(foregroundColor);
}
public void setForegroundColor(String fgColor) {
if (!isEmpty(fgColor)) {
foregroundColor = fgColor;
}
}
...
private boolean isEmpty(String value) {
return((value == null) || (value.trim().equals("")));
}
}35 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Servlet
public class ShowColors1 extends HttpServlet {
public void doGet(HttpServletRequest request,
HttpServletResponse response)
throws ServletException, IOException {
HttpSession session = request.getSession();
ColorBean1 colorBean =
(ColorBean1)session.getAttribute("colorBean1");
if (colorBean == null) {
colorBean = new ColorBean1();
session.setAttribute("colorBean1", colorBean);
}
colorBean.setForegroundColor
(request.getParameter("foregroundColor"));
colorBean.setBackgroundColor
(request.getParameter("backgroundColor"));
if (colorBean.getForegroundColor().equals
(colorBean.getBackgroundColor())) {
colorBean = new ColorBean1();
session.setAttribute("colorBean1", colorBean);
}
String address = "/WEB-INF/results/show-colors1.jsp";
RequestDispatcher dispatcher =
request.getRequestDispatcher(address);
dispatcher.forward(request, response);
}}
36 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Form
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Choose Preferred Colors</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Choose Preferred Colors</H1>
<FORM ACTION="ShowColors1">
Foreground: <INPUT TYPE="TEXT" NAME="foregroundColor"><BR>
Background: <INPUT TYPE="TEXT" NAME="backgroundColor"><BR>
<INPUT TYPE="SUBMIT" VALUE="Set Colors">
</FORM>
</CENTER>
</BODY></HTML>37 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Form
38 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Results Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Show Colors</TITLE></HEAD>
<BODY BGCOLOR="${colorBean1.backgroundColor}"
TEXT="${colorBean1.foregroundColor}">
<H1>Show Colors</H1>
Blah, blah, blah, blah.
</BODY></HTML>39 Apache Struts: Advanced Actions www.coreservlets.com
Non-Struts Version: Results
40 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction Version: Bean
package coreservlets;
import org.apache.struts.action.*;
public class ColorBean2 extends ActionForm {
private String foregroundColor = "BLACK";
private String backgroundColor = "WHITE";
public String getForegroundColor() {
return(foregroundColor);
}
public void setForegroundColor(String fgColor) {
foregroundColor = fgColor;
}
...
}41 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction Version: Servlet
public class ShowColors2 extends HttpServlet {
public void doGet(HttpServletRequest request,
HttpServletResponse response)
throws ServletException, IOException {
HttpSession session = request.getSession();
ColorBean2 colorBean =
(ColorBean2)session.getAttribute("colorBean2");
if (colorBean.getForegroundColor().equals
(colorBean.getBackgroundColor())) {
colorBean = new ColorBean2();
session.setAttribute("colorBean2", colorBean);
}
String address = "/WEB-INF/results/show-colors2.jsp";
RequestDispatcher dispatcher =
request.getRequestDispatcher(address);
dispatcher.forward(request, response);
}
}
42 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction Version: 
struts-config.xml
<struts-config>
<form-beans>
...
<form-bean name="colorBean2"
type="coreservlets.ColorBean2"/>
</form-beans>
<action-mappings>
...
<action path="/showColors2" 
type="org.apache.struts.actions.ForwardAction"
name="colorBean2"
scope="session"
parameter="/ShowColors2"/>
</action-mappings>
</struts-config>43 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction Version: Form
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Choose Preferred Colors</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Choose Preferred Colors</H1>
<FORM ACTION="showColors2.do">
Foreground: <INPUT TYPE="TEXT" NAME="foregroundColor"><BR>
Background: <INPUT TYPE="TEXT" NAME="backgroundColor"><BR>
<INPUT TYPE="SUBMIT" VALUE="Set Colors">
</FORM>
</CENTER>
</BODY></HTML>
44 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction: Form45 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction Version: 
Results Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Show Colors</TITLE></HEAD>
<BODY BGCOLOR="${colorBean2.backgroundColor}"
TEXT="${colorBean2.foregroundColor}">
<H1>Show Colors</H1>
Blah, blah, blah, blah.
</BODY></HTML>
46 Apache Struts: Advanced Actions www.coreservlets.com
ForwardAction: Results47 Apache Struts: Advanced Actions www.coreservlets.com
Other Specialized 
Action Subclasses
• DefinitionDispatchAction
– Associates a URL with a Tiles definition name
• DownloadAction
– Used for actions that handle forms with file uploads
• IncludeAction
– Similar to ForwardAction, but includes instead of forwards
• Populates form beans first
• Useful for normal MVC-style servlet that wants to use the Struts formbean capability
• LocaleAction
– Uses request params to decide which Locale to use
• SwitchAction
– Invokes resource from a specific Struts Module
• TilesAction
– Accepts one extra parameter: the tiles context
48 Apache Struts: Advanced Actions www.coreservlets.com
Summary
• DispatchAction
– Use struts-config.xml to list the parameter used to 
determine which method will be called
• <action path="..." type="..." parameter="operation">
– Extend DispatchAction instead of Action
• Directly implement desired methods
– In form, supply parameter with given name
– Form bean needs no accessors for special parameter
• ForwardAction
– Use struts-config.xml to declare the bean and give 
address of servlet that will use it
• <action path="/blah" 
type="org.apache.struts.actions.ForwardAction"
name="bean-name"
scope="request-session-or-application"
parameter="/path-to-servlet"/>Slides © Marty Hall, http://www.coreservlets.com, books © Sun Microsystems Press 
Questions?
Core Servlets & JSP book: www.coreservlets.com
More Servlets & JSP book: www.moreservlets.com
Servlet, JSP, Struts, JSF, and Java Training Courses: 
courses.coreservlets.co


















































@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String indexPage = request.getParameter("index");
		if (indexPage == null) {
			indexPage = "1";
		}
		String pages = request.getParameter("page");
		if (pages == null) {
			pages= "1";
		}
		int page = Integer.parseInt(pages);
		
		int index = Integer.parseInt(indexPage);
		request.setAttribute("tag", index);
		T002Dao dao = new T002Dao();
		try {
			List<SearchBean> listPage = dao.getData();
			request.setAttribute("ListA", listPage);
			return (mapping.findForward("T002"));
		}catch(Exception e) {
			e.printStackTrace();
			return (mapping.findForward("T002"));
		}
		
	}




<%@ taglib uri="/tags/struts-bean" prefix="bean" %>
<%@ taglib uri="/tags/struts-html" prefix="html" %>
<%@ taglib uri="/tags/struts-logic" prefix="logic" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>



























<form-beans>
		<form-bean
            name="loginBean"
            type="fjs.cs.bean.LoginBean"/>
	</form-beans>
	<global-forwards>
        <forward
        	name="T001"
        	path="/pages/T001.jsp"/>
        
    </global-forwards>
    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
        	input="/pages/T001.jsp"
           	path="/T001"
            type="fjs.cs.action.T001"
            validate="true"
            name="loginBean"
			scope="request">
            <forward name="success" path="/pages/T002.jsp">
				<param name="action">fjs.cs.action.T002</param>
				<param name="parameterName">t002Bean</param>
				<param name="parameter">value</param>
			</forward>
            <forward name="fail" path="/pages/T001.jsp"/>
        </action>
        
        <action
        	path="/T002"
        	type="fjs.cs.action.T002"
        	scope="request"
        	name="t002Bean">
        	<forward name="success" path="/T002.do"/>
        </action>
</action-mappings>  




<form-beans>
		<form-bean
            name="loginBean"
            type="fjs.cs.bean.LoginBean"/>
	</form-beans>
	<global-forwards>
        <forward
        	name="T001"
        	path="/pages/T001.jsp"/>
        
    </global-forwards>
    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
        	input="/pages/T001.jsp"
           	path="/T001"
            type="fjs.cs.action.T001"
            validate="true"
            name="loginBean"
			scope="request">
            <forward name="success" path="/pages/T002.jsp"/>
            <forward name="fail" path="/pages/T001.jsp"/>
        </action>
        
        <action
        	path="/T002"
        	type="fjs.cs.action.T002"
        	scope="request"
        	name="t002Bean">
        	<forward name="success" path="/T002.do"/>
        </action>
      </action-mappings>  
      








@Override
	public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
		ActionErrors error = new ActionErrors();
	    String userID = request.getParameter("USERID"); 
	    String password = request.getParameter("PASSWORD");
	    if (userID == "") {
	    	userID = null;
	    }
	    if (password == "") {
	    	password = null;
	    }
	    if (userID == null && password != null) {
	        error.add("loginError", new ActionMessage("LoginBean.username.required"));
	    }
	    if (password == null && userID != null) {
	        error.add("loginError", new ActionMessage("LoginBean.password.required"));
	    }
	    return error;
	}






public class T001 extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		try {
			LoginBean loginBean = (LoginBean) form;
			String user = loginBean.getUSERID();
			String pass = loginBean.getPASSWORD();
			T001Dao loginDao = new T001Dao();
			LoginBean result = loginDao.checkLogin(user, pass);
			if (result != null) {
				return (mapping.findForward("success"));
			}else {
				String messageError = Constants.MESSAGE_ERROR_USER_NOT_EXIST;
				request.setAttribute("messageErrorLogin", messageError);
				return (mapping.findForward("fail"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (mapping.findForward("fail"));

	}
}





<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts-config PUBLIC 
"-//Apache Software Foundation//DTD Struts Configuration 1.3//EN" 
"http://jakarta.apache.org/struts/dtds/struts-config_1_3.dtd">

<struts-config>

	<form-beans>
		<form-bean
            name="loginBean"
            type="fjs.com.Dto.T001Dto"/>
			
	</form-beans>
	 <global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
         <forward name="T001" path="/pages/T001.jsp"/>
       
    </global-forwards>
	<action-mappings>
		<action 
			input="/pages/T001.jsp"
			path="/T001"
			type="com.mkyong.common.action.T001"
			 name="loginBean"
			scope="request"
			validate = "true">
			 <forward name="success" path="/pages/T002.jsp"/>
            <forward name="fail" path="/pages/T001.jsp"/>
			
		</action>
	</action-mappings>

</struts-config>









<global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
        <forward
        	name="T001"
        	path="/pages/T001.jsp"/>
        <forward
        	name="T001"
        	path="/T001.do"/>
    </global-forwards>

	
<!-- =========================================== Action Mapping Definitions -->
	<form-beans>
		<form-bean
            name="loginBean"
            type="fjs.cs.bean.LoginBean"/>
	</form-beans>
    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
        	input="/pages/T001.jsp"
            path="/T001"
            type="fjs.cs.action.T001"
            validate="true"
            name="loginBean"
			scope="request">
            <forward name="success" path="/pages/T002.jsp"/>
            <forward name="fail" path="/pages/T001.jsp"/>
        </action>
  </action-mappings>





<%@ taglib uri="/tags/struts-bean" prefix="bean" %>
<%@ taglib uri="/tags/struts-html" prefix="html" %>
<%@ taglib uri="/tags/struts-logic" prefix="logic" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
  <%@include file="/WEB-INF/css/T001.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>
<title><bean:message key="login.title"/></title>
</head>
<body>
	<div id="main">
		<div class="header">
			<h3 class="header-text"><bean:message key="header.customerstruts"/></h3>
			<div class="header-br"></div>
		</div>
		<div class="content">
			<div class="content-text"><bean:message key="header2.cusomerstruts"/></div>
		
			<div class="content-login">
				<form action="./T001.do" name="frmLogin" method="POST" >
					<div class="content-login__header">
						<h3><bean:message key="login.screen"/></h3>
						<label id="lblErrorMessage">
							<html:errors/>
						</label>
					</div>
					<div class="content-login__container">
						<div class="form-group">
							<label for="fullname" class="form-label form-label__userID"><bean:message key="username.text"/></label>
							 <input id="txtUserID" name="USERID" maxlength="8"
								type="text" class="form-control">
						</div>
						<div class="form-group__password">
							<label for="password" class="form-label"><bean:message key="password.text"/> </label> <input
								id="txtPassword" name="PASSWORD" type="password" maxlength="8"
								class="form-control">
						</div>
						<div class="form-group__btn">
							<button type="submit" id="btnLogin" class="form-submit"><bean:message key="login.button.Login"/></button>
							<button type="button" id="btnClear" class="form-submit"><bean:message key="login.button.clear"/></button>
						</div>
					</div>
				</form>
			</div>
		
		</div>
		<footer class="footer">
			<div class="header-br"></div>
			<div class="footer-text__copyright"><bean:message key="login.footer"/></div>
		</footer>
	</div>
</body>
<script>
	<%@include file="/WEB-INF/js/T001.js"%>
</script>
</html>






@Override
	public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
		ActionErrors error = new ActionErrors();
	    String userID = request.getParameter("USERID"); 
	    String password = request.getParameter("PASSWORD");
	    if (userID == "") {
	    	userID = null;
	    }
	    if (password == "") {
	    	password = null;
	    }
	    if (userID == null && password == null) {
	    	error.add("loginError", new ActionMessage("LoginBean.username.required"));
	        return error;
	    }
	    if (userID == null && password != null) {
	        error.add("loginError", new ActionMessage("LoginBean.username.required"));
	        return error;
	    }
	    if (password == null && userID != null) {
	        error.add("loginError", new ActionMessage("LoginBean.password.required"));
	       
	        return error;
	    }
	    return error;
	}
	
	
public class T001 extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form, 
		HttpServletRequest request, HttpServletResponse response) throws Exception {
		try {
			LoginBean loginBean = (LoginBean)form;
			String user = loginBean.getUSERID();
			String pass = loginBean.getPASSWORD();
			T001Dao loginDao = new T001Dao();
			LoginBean result = loginDao.checkLogin(user, pass);
			if (result != null) {
				return(mapping.findForward("success"));
			}else {
				String messageError = Constants.MESSAGE_ERROR_USER_NOT_EXIST;
				request.setAttribute("messageErrorLogin", messageError);
				return(mapping.findForward("fail"));
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return(mapping.findForward("fail"));
		
	}
}





<%@ taglib uri="/tags/struts-bean" prefix="bean" %>
<%@ taglib uri="/tags/struts-html" prefix="html" %>
<%@ taglib uri="/tags/struts-logic" prefix="logic" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
  <%@include file="/WEB-INF/css/T001.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>
<title><bean:message key="login.title"/></title>
</head>
<body>
	<div id="main">
		<div class="header">
			<h3 class="header-text"><bean:message key="header.customerstruts"/></h3>
			<div class="header-br"></div>
		</div>
		<div class="content">
			<div class="content-text"><bean:message key="header2.cusomerstruts"/></div>
		
			<div class="content-login">
				<form action="./T001.do" name="frmLogin" method="POST" >
					<div class="content-login__header">
						<h3><bean:message key="login.screen"/></h3>
						<label id="lblErrorMessage">
							
						</label>
					</div>
					<div class="content-login__container">
						<div class="form-group">
							<label for="fullname" class="form-label form-label__userID"><bean:message key="username.text"/></label>
							 <input id="txtUserID" name="USERID" maxlength="8"
								type="text" class="form-control">
						</div>
						<div class="form-group__password">
							<label for="password" class="form-label"><bean:message key="password.text"/> </label> <input
								id="txtPassword" name="PASSWORD" type="password" maxlength="8"
								class="form-control">
						</div>
						<div class="form-group__btn">
							<button type="submit" id="btnLogin" class="form-submit"><bean:message key="login.button.Login"/></button>
							<button type="button" id="btnClear" class="form-submit"><bean:message key="login.button.clear"/></button>
						</div>
					</div>
				</form>
			</div>
		
		</div>
		<footer class="footer">
			<div class="header-br"></div>
			<div class="footer-text__copyright"><bean:message key="login.footer"/></div>
		</footer>
	</div>
</body>
<script>
	<%@include file="/WEB-INF/js/T001.js"%>
</script>
</html>



@Override
	public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
		ActionErrors error = new ActionErrors();
	    String userID = request.getParameter("USERID"); // lấy giá trị của ô input có tên là "userID"
	    String password = request.getParameter("PASSWORD"); // lấy giá trị của ô input có tên là "password"
	    if (userID == "") {
	    	userID = null;
	    }
	    if (password == "") {
	    	password = null;
	    }
	    if (userID == null && password == null) {
	        return error;
	    }
	    if (userID == null && password != null) {
	        error.add("username", new ActionMessage("LoginBean.username.required"));
	        return error;
	    }
	    if (password == null && userID != null) {
	        error.add("password", new ActionMessage("LoginBean.password.required"));
	        return error;
	    }
	    return error;
	}





public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
    ActionErrors error = new ActionErrors();
    String userID = request.getParameter("userID"); // lấy giá trị của ô input có tên là "userID"
    String password = request.getParameter("password"); // lấy giá trị của ô input có tên là "password"
    if (userID == null && password == null) {
        return error;
    }
    if (userID == null || userID.trim().isEmpty() && !password.isEmpty()) {
        error.add("username", new ActionMessage("LoginBean.username.required"));
        return error;
    }
    if (password == null || userID.trim().isEmpty() && userID.isEmpty()) {
        error.add("password", new ActionMessage("LoginBean.password.required"));
        return error;
    }
    return error;
}




<fmt:message key="LoginBean.username.required" var="usernameError" />
<c:if test="${not empty usernameError}">
    <div id="username_error">${usernameError}</div>
</c:if>



<bean:message key="LoginBean.username.required" var="usernameError"/>
<c:if test="${not empty usernameError}">
    <div id="username_error">${usernameError}</div>
</c:if>

<bean:message key="LoginBean.paddword.required" var="passwordError"/>
<c:if test="${not empty passwordError}">
    <div id="password_error">${passwordError}</div>
</c:if>

							
							
							
							
							
							public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
		ActionErrors error = new ActionErrors();
		if (getUSERID() == null && getUSERID() == null) {
			return error;
		}
		if (getUSERID() == null || getUSERID().trim().isEmpty() && !getPASSWORD().isEmpty()) {
			error.add("username", new ActionMessage("LoginBean.username.required"));
			return error;
		}
		if (getPASSWORD() == null || getUSERID().trim().isEmpty() && getUSERID().isEmpty()) {
			error.add("paddword", new ActionMessage("LoginBean.paddword.required"));
			return error;
		}
		return error;
		
	}








The Six Basic Steps in Using 
Struts: Updates for Bean Use
1. Modify struts-config.xml. 
Use WEB-INF/struts-config.xml to: 
– Map incoming .do addresses to Action classes 
– Map return conditions to JSP pages 
– Declare any form beans that are being used.
– Restart server after modifying struts-config.xml. 
2. Define a form bean.
– This bean extends ActionForm and represents the data 
submitted by the user. It is automatically populated 
when the input form is submitted. More precisely:
1. The reset method is called (useful for session-scoped beans)
2. For each incoming request parameter, the corresponding setter 
method is called
3. The validate method is called (possibly preventing the Action)



The Six Basic Steps in Using 
Struts: Updates for Bean Use
3. Create results beans.
– These are normal beans of the sort used in MVC when 
implemented directly with RequestDispatcher. That is, 
they represent the results of the business logic and data 
access code. These beans are stored in request, session, 
or application scope with the setAttribute method of 
HttpServletRequest, HttpSession, or ServletContext, 
just as in normal non-Struts applications. 
4. Define an Action class to handle requests.
– Rather than calling request.getParameter explicitly as in 
the previous example, the execute method casts the 
ActionForm argument to the specific form bean class, 
then uses getter methods to access the properties of the 
object



The Six Basic Steps in Using 
Struts: Updates for Bean Use
5. Create form that invokes blah.do.
– For now, we will use static HTML 
• Later, we will use the html:form tag to guarantee that the 
textfield names correspond to the bean property names, and to 
make it easy to fill in the form based on values in the app
• Later, we will also use bean:message to output fixed strings 
from a properties file
6. Display results in JSP.
– The JSP page uses the bean:write tag to output 
properties of the form and result beans. 
– It may also use the bean:message tag to output standard 
messages and text labels that are defined in a properties 
file (resource bundle). 


























Step 6 (Display Results in JSP) 
Alternatives for Beans
• Use the JSP 2.0 expression language. 
– This is perhaps the best option if the server supports JSP 2.0. In 
these examples, we will assume that the application needs to run on 
multiple servers, some of which support only JSP 1.2. 
• Use the Struts bean:write tag. 
– This is by far the most common approach when using Struts. Note 
that, unlike c:out and the JSP 2.0 expression language, bean:write 
automatically filters special HTML characters, replacing < with &lt; 
and > with &gt;. You can disable this behavior by specifying
<bean:write name="beanName" 
property="beanProperty"
filter="false">
– So, in this example we use bean:write. Before we do so, however,
we have to import the "bean" tag library as follows. 
<%@ taglib uri="http://struts.apache.org/tags-bean" 
prefix="bean" %>








Step 6 (Display Results in JSP) 
First Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Illegal Email Address</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Illegal Email Address</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean"
prefix="bean" %>
The address
"<bean:write name="userFormBean" property="email"/>"
is not of the form username@hostname (e.g.,
<bean:write name="suggestionBean" property="email"/>).
<P>
Please <A HREF="register1.jsp">try again</A>.
</CENTER>
</BODY></HTML>





Step 6 (Display Results in JSP) 
Second Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Illegal Password</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Illegal Password</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean"
prefix="bean" %>
The password
"<bean:write name="userFormBean" property="password"/>"
is too short; it must contain at least six characters.
Here is a possible password:
<bean:write name="suggestionBean" property="password"/>.
<P>
Please <A HREF="register1.jsp">try again</A>.
</CENTER>
</BODY></HTML>





Step 6 (Display Results in JSP) 
Third Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Success</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>You have registered successfully.</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean" 
prefix="bean" %>
<UL>
<LI>Email Address: 
<bean:write name="userFormBean" property="email"/>
<LI>Password: 
<bean:write name="userFormBean" property="password"/>
</UL>
Congratulations
</CENTER>
</BODY></HTML>


<global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
         <forward
        	name="success"
        	path="/pages/T002.jsp"/>
        	
        <forward
        	name="T001"
        	path="/T001.do"/>
        	
       	<forward
        	name="T003"
        	path="/pages/T001.jsp"/>
    </global-forwards>
    
    
    
    
    
    
    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/T001"
            type="fjs.cs.action.T001">
    
        </action>
       
      
    <!-- sample input and input submit actions

        <action
            path="/Input"
            type="org.apache.struts.actions.ForwardAction"
            parameter="/pages/Input.jsp"/>

        <action
            path="/InputSubmit"
            type="app.InputAction"
            name="inputForm"
            scope="request"
            validate="true"
            input="/pages/Input.jsp"/>

            <action
                path="/edit*"
                type="app.Edit{1}Action"
                name="inputForm"
                scope="request"
                validate="true"
                input="/pages/Edit{1}.jsp"/>

    end samples -->
    </action-mappings>
    
    
    
    
    <form action="/T001.do" name="frmLogin" method="POST" >
					<div class="content-login__header">
						<h3>LOGIN</h3>
						<label id="lblErrorMessage">
						</label>
					</div>
					<div class="content-login__container">

						<div class="form-group">
							<label for="fullname" class="form-label form-label__userID">User
								Id: </label> <input id="txtUserID" name="userName" maxlength="8"
								type="text" class="form-control">
						</div>
						<div class="form-group__password">
							<label for="password" class="form-label">Password: </label> <input
								id="txtPassword" name="password" type="password" maxlength="8"
								class="form-control">
						</div>
						<div class="form-group__btn">
							<button type="submit" id="btnLogin" class="form-submit">Login</button>
							<button type="button" id="btnClear" class="form-submit">Clear</button>
						</div>
					</div>s
				</form>
				
				
				
				
				
public class T001 extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form, 
		HttpServletRequest request, HttpServletResponse response) throws Exception {
		try {
			String user = request.getParameter("userName");
			String pass = request.getParameter("password");
//			String message = "";
//			T001Dao loginDao = new T001Dao();
//			T001Dto result = loginDao.checkLogin(user, pass);
//			
//			if (result != null) {
//				message = "success";
//				return(mapping.findForward("success"));
//			}else {
//				message = "error";
//			}
			if (Integer.parseInt(user) == 123){
				return(mapping.findForward("success"));
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return(mapping.findForward("T003"));
		
	}d






<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE struts-config PUBLIC
          "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"
          "http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">

<!--
     This is a blank Struts configuration file with an example
     welcome action/page and other commented sample elements.

     Tiles and the Struts Validator are configured using the factory defaults
     and are ready-to-use.

     NOTE: If you have a generator tool to create the corresponding Java classes
     for you, you could include the details in the "form-bean" declarations.
     Otherwise, you would only define the "form-bean" element itself, with the
     corresponding "name" and "type" attributes, as shown here.
-->


<struts-config>

<!-- ============================================ Data Source Configuration -->
<!--
<data-sources>
<data-source type="org.apache.commons.dbcp.BasicDataSource">
    <set-property
      property="driverClassName"
      value="org.postgresql.Driver" />
    <set-property
      property="url"
      value="jdbc:postgresql://localhost/mydatabase" />
    <set-property
      property="username"
      value="me" />
    <set-property
      property="password"
      value="test" />
    <set-property
      property="maxActive"
      value="10" />
    <set-property
      property="maxWait"
      value="5000" />
    <set-property
      property="defaultAutoCommit"
      value="false" />
    <set-property
      property="defaultReadOnly"
      value="false" />
    <set-property
      property="validationQuery"
      value="SELECT COUNT(*) FROM market" />
</data-source>
</data-sources>
-->

<!-- ================================================ Form Bean Definitions -->

    <form-beans>
    <!-- sample form bean descriptor for an ActionForm
        <form-bean
            name="inputForm"
            type="app.InputForm"/>
    end sample -->

    <!-- sample form bean descriptor for a DynaActionForm
        <form-bean
            name="logonForm"
            type="org.apache.struts.action.DynaActionForm">
            <form-property
                name="username"
                type="java.lang.String"/>
            <form-property
                name="password"
                type="java.lang.String"/>
       </form-bean>
    end sample -->
    </form-beans>


<!-- ========================================= Global Exception Definitions -->

    <global-exceptions>
        <!-- sample exception handler
        <exception
            key="expired.password"
            type="app.ExpiredPasswordException"
            path="/changePassword.jsp"/>
        end sample -->
    </global-exceptions>


<!-- =========================================== Global Forward Definitions -->
	
    <global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
        <forward
            name="wellcome"
            path="/pages/T001.jsp"/>
       
    </global-forwards>
    
    <global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
         <forward
        	name="successs"
        	path="/pages/T002.jsp"/>
        	
        <forward
        	name="T001"
        	path="/pages/T001.jsp"/>
    </global-forwards>

	
<!-- =========================================== Action Mapping Definitions -->

    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/InputSubmit"
            type="fjs.cs.coreservlets.T001"
            parameter="/pages/T001.jsp">
        </action>
       
        <action
            path="/T002"
            forward="/pages/T002.jsp">
            
        </action>
    <!-- sample input and input submit actions

        <action
            path="/Input"
            type="org.apache.struts.actions.ForwardAction"
            parameter="/pages/Input.jsp"/>

        <action
            path="/InputSubmit"
            type="app.InputAction"
            name="inputForm"
            scope="request"
            validate="true"
            input="/pages/Input.jsp"/>

            <action
                path="/edit*"
                type="app.Edit{1}Action"
                name="inputForm"
                scope="request"
                validate="true"
                input="/pages/Edit{1}.jsp"/>

    end samples -->
    </action-mappings>
<!-- ============================================= Controller Configuration -->

    <controller
       processorClass="org.apache.struts.tiles.TilesRequestProcessor"/>


<!-- ======================================== Message Resources Definitions -->

    <message-resources parameter="MessageResources" />


<!-- =============================================== Plug Ins Configuration -->

  <!-- ======================================================= Tiles plugin -->
  <!--
     This plugin initialize Tiles definition factory. This later can takes some
	 parameters explained here after. The plugin first read parameters from
	 web.xml, thenoverload them with parameters defined here. All parameters
	 are optional.
     The plugin should be declared in each struts-config file.
       - definitions-config: (optional)
            Specify configuration file names. There can be several comma
		    separated file names (default: ?? )
       - moduleAware: (optional - struts1.1)
            Specify if the Tiles definition factory is module aware. If true
            (default), there will be one factory for each Struts module.
			If false, there will be one common factory for all module. In this
            later case, it is still needed to declare one plugin per module.
            The factory will be initialized with parameters found in the first
            initialized plugin (generally the one associated with the default
            module).
			  true : One factory per module. (default)
			  false : one single shared factory for all modules
	   - definitions-parser-validate: (optional)
	        Specify if xml parser should validate the Tiles configuration file.
			  true : validate. DTD should be specified in file header (default)
			  false : no validation

	  Paths found in Tiles definitions are relative to the main context.
  -->

    <plug-in className="org.apache.struts.tiles.TilesPlugin" >

      <!-- Path to XML definition file -->
      <set-property property="definitions-config"
                       value="/WEB-INF/tiles-defs.xml" />
      <!-- Set Module-awareness to true -->
      <set-property property="moduleAware" value="true" />
    </plug-in>


  <!-- =================================================== Validator plugin -->

  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
    <set-property
        property="pathnames"
        value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml"/>
  </plug-in>
</struts-config>








































<form action="/InputSubmit" name="frmLogin" method="POST" >


<action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/InputSubmit"
            type="fjs.cs.coreservlets.T001">
        </action>
       
       </action-mappings> 





create database baitap
create table KHACHHANG (
	MAKH char(4),
	HOTEN varchar(40),
	DCHI varchar(50),
	SODT varchar(50),
	NGSINH smalldatetime,
	NGDK smalldatetime,
	DOANHSO money
)
select * from KHACHHANG
INSERT INTO KHACHHANG(MAKH, HOTEN, DCHI, SODT, NGSINH, NGDK, DOANHSO) 
VALUES
('KH01', 'Nguyen Van A', '731 Tran Hung Dao, Q5 HCM', '08823451', '1960-10-22', '2006-07-22', 13060000),
('KH02', 'Tran Ngoc Han', '23/05 Nguyen Trai Q5 HCM', '0908256478', '1974-04-03', '2006-07-30', 280000);

('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),
('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),
('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),

create table NHANVIEN (
	MANV char(4),
	HOTEN varchar(40),
	SODT varchar(20),
	NGVL smalldatetime,
)
select * from NHANVIEN

INSERT INTO NHANVIEN(MANV, HOTEN, SODT, NGVL) 
VALUES ('NV01', 'Nguyen Nhu Nhut', '0927345678','2006-04-03'),
('NV02', 'Le Thi Phi Yen', '0927345678','2006-04-21'),
('NV03', 'Nguyen Van B', '0927345678','2006-04-27'),
('NV04', 'Ngo Thanh Tuan', '0927345678','2006-04-24'),
('NV05', 'Nguyen Thi Truc Thanh', '0927345678','2006-07-20');


create table SANPHAM (
	MASP char(4),
	TENSP varchar(40),
	DVT varchar(20),
	NUOCSX varchar(40),
	GIA money
)
select * from SANPHAM


INSERT INTO SANPHAM(MASP, TENSP, DVT, NUOCSX, GIA) 
VALUES ('BC01', 'But Chi', 'Cay','SingGaPore', 3000),
('BC02', 'But Chi', 'Cay','SingGaPore', 5000),
('BC03', 'But Chi', 'Cay','SingGaPore', 5000),
('BC04', 'But Chi', 'Cay','SingGaPore', 6000),
('TV01', 'Tap 100  giay mong', 'Quyen','Trung Quoc', 7000);



create table HOADON(
	SOHD int,
	NGHD smalldatetime,
	MAKH char(4),
	MANV char(4),
	TRIGIA money
)

INSERT INTO HOADON(SOHD, NGHD, MAKH, MANV, TRIGIA) 
VALUES ('1001', '2006-03-23', 'KH01','NV01', 32000),
('1002', '2006-03-12', 'KH01','NV02', 52000),
('1003', '2006-03-21', 'KH02','NV01', 52000),
('1004', '2006-03-22', 'KH01','NV01', 16000),
('1005', '2006-03-24', 'KH01','NV01', 73000);

create table CTHD(
	SOHD int,
	MASP char(4),
	SL int
)

INSERT INTO CTHD(SOHD, MASP, SL) 
VALUES ('1001', 'TV02', 10),
('1001', 'TV02', 10),
('1002', 'ST01', 3),
('1003', 'TV02', 4),
('1004', 'TV02', 5);

alter table SANPHAM add GHICHU varchar(20)
alter table KHACHHANG  add LOAIKH  tinyint
alter table SANPHAM alter column GHICHU varchar(100)
-- 1.5
alter table SANPHAM drop column GHICHU
