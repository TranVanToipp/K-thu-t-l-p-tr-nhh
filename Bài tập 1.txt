// Tính toán số trang và lấy danh sách kết quả tìm kiếm cho trang hiện tại
			int count = resultSearch.size();
			int endpage = (int) Math.ceil(count / 15.0);
			String indexPage = request.getParameter("index");
			int index = indexPage == null ? 1 : Integer.parseInt(indexPage);
			List<T002Dto> listPage = daoSearch.pagingData(index, resultSearch);
			request.setAttribute("ListA", listPage);
			request.setAttribute("endP", endpage);



protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    //...
    List<T002Dto> resultSearch = daoSearch.getDataSearch(name, sex, birthdayFrom, birthdayTo);
    request.setAttribute("listDataSearch", resultSearch);

    // calculate pagination for search results
    int count = daoSearch.getCountDataSearch(name, sex, birthdayFrom, birthdayTo);
    int endpage = count / 15;
    if (count % 15 != 0) {
        endpage++;
    }
    int indexPage = 1; // reset to first page
    List<T002Dto> listPage = daoSearch.pagingDataSearch(indexPage, name, sex, birthdayFrom, birthdayTo);
    request.setAttribute("ListA", listPage);
    request.setAttribute("endP", endpage);
    
    //...
}









protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    req.setCharacterEncoding("UTF-8");

    String user = req.getParameter("userName");
    String pass = req.getParameter("password");

    // Kiểm tra input trước khi tiếp tục xử lý đăng nhập
    if (!checkInput(user, pass)) {
        String message = "Invalid input.";
        req.setAttribute("message", message);
        RequestDispatcher dispatcher = req.getRequestDispatcher("/WEB-INF/jsp/T001.jsp");
        dispatcher.forward(req, resp);
        return;
    }

    try {
        T001Dao loginDao = new T001Dao();
        T001Dto result = loginDao.checkLogin(user, pass);
        T001Dto getSession = loginDao.getSession(user);

        // Xử lý đăng nhập
        if (result != null) {
            HttpSession session = req.getSession(); 
            session.setAttribute("psnCd", result.getPSN_CD());
            session.setAttribute("name", getSession.getUSERNAME());  
            resp.sendRedirect("/CustomerSystem/T002");
        } else {
            String message = Constants.MESSAGE_ERROR_USER_NOT_EXIST;
            req.setAttribute("message", message);
            RequestDispatcher dispatcher = req.getRequestDispatcher("/WEB-INF/jsp/T001.jsp");
            dispatcher.forward(req, resp);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

private boolean checkInput(String user, String pass) {
    if (user == null || user.trim().isEmpty()) {
        return false;
    }
    if (pass == null || pass.trim().isEmpty()) {
        return false;
    }
    return true;
}







protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		try {
			String name = request.getParameter("txtCustomerName");
			String sex = request.getParameter("browser");
			String birthdayFrom = request.getParameter("txtBirthdayFromName");
			String birthdayTo = request.getParameter("txtBirthdayToName");
			T002Dao daoSearch = new T002Dao();
			if (name == null || name.trim().isEmpty()) {
			    name = null;
			}
			if (sex == null || sex.trim().isEmpty()) {
			    sex = null;
			}
			if (birthdayFrom == null || birthdayFrom.trim().isEmpty()) {
			    birthdayFrom = null;
			}
			if (birthdayTo == null || birthdayTo.trim().isEmpty()) {
			    birthdayTo = null;
			}
			List<T002Dto> resultSearch = daoSearch.getDataSearch(name, sex, birthdayFrom, birthdayTo);
			
			request.setAttribute("listDataSearch", resultSearch);
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
			rd.forward(request, response);
			//Lấy data các checkbox được checked
			String[] ids = request.getParameterValues("selectedValues");
			if (ids != null && ids.length > 0) {
			    String idList = String.join(",", ids);
			   
			    // Loại bỏ các dấu ngoặc kép trong chuỗi
			    idList = idList.replace("[\"", "").replace("\"]", "");
			    String result = idList.replaceAll("[^\\d,]", "").replace("\"", "");
			    String[] result2 = result.split(",");
			    if (result2.length == 16) {
			    	String[] result3 = Arrays.copyOfRange(result2, 1, result2.length);
		    		daoSearch.deleteData(result3);
			    }else {
			    	for (int i = 0;i< result2.length; i++) {
				    	if (result2.length == 16) {
				    		daoSearch.deleteData(result2);
				    	}
				    	daoSearch.deleteData(result2);
				    }
			    }
			}	
			
			// Gán giá trị của resultSearch cho listPage nếu resultSearch không rỗng
			if(resultSearch != null && !resultSearch.isEmpty()) {
				request.setAttribute("ListA", resultSearch);
			} else {
				int index = Integer.parseInt(request.getParameter("index"));
				request.setAttribute("tag", index);
				T002Dao dao = new T002Dao();
				List<T002Dto> list = dao.getData();
				request.setAttribute("listData", list);
				count = dao.getDataPage();
				int endpage = count/15;
				if (count % 15 != 0) {
					endpage++;
				}
				List<T002Dto> listPage = dao.pagingData(index);
				request.setAttribute("ListA", listPage);
				request.setAttribute("endP", endpage);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}










<c:choose>
    <c:when test="${not empty listDataSearch}">
        <c:set var="displayData" value="${listDataSearch}" />
    </c:when>
    <c:otherwise>
        <c:set var="displayData" value="${ListA}" />
    </c:otherwise>
</c:choose>

<c:forEach items="${displayData}" var="dept">
    <tr>
        <td class="searchtable-check"><input type="checkbox" name="checkboxAll" value="${dept.CUSTOMER_ID}"></td>
        <td><a href="/CustomerSystem/T003?id=${dept.CUSTOMER_ID}" class="searchtable-id">${dept.CUSTOMER_ID}</a></td>
        <td class="searchtable-name">${dept.CUSTOMER_NAME}</td>
        <td class="searchtable-sex">${dept.SEX}</td>
        <td class="searchtable-birthday">${dept.BIRTHDAY}</td>
        <td class="searchtable-address">${dept.ADDRESS}</td>
    </tr>
</c:forEach>




<c:set var="displayList" value="${not empty listDataSearch ? listDataSearch : ListA}" />
<c:forEach items="${displayList}" var="dept">
    <tr>
        <td class="searchtable-check"><input type="checkbox" name="checkboxAll" value="${dept.CUSTOMER_ID}"></td>
        <td><a href="/CustomerSystem/T003?id=${dept.CUSTOMER_ID}" class="searchtable-id">${dept.CUSTOMER_ID}</a></td>
        <td class="searchtable-name">${dept.CUSTOMER_NAME}</td>
        <td class="searchtable-sex">${dept.SEX}</td>
        <td class="searchtable-birthday">${dept.BIRTHDAY}</td>
        <td class="searchtable-address">${dept.ADDRESS}</td>
    </tr>
</c:forEach>







<%
HttpSession session = request.getSession();
session.setAttribute("psnCd", result.getPSN_CD());
session.setAttribute("name", getSession.getUSERNAME());
%>




<%
HttpSession session = request.getSession(false);
if (session != null && session.getAttribute("name") != null) {
%>

   <div class="search-container__logo">
      <div>Welcome <%= session.getAttribute("name") %></div>
   </div>
<%
} 
%>





/**
 * @(#)T001.java 01-00 2021/07/16
 *
 * Copyright(C) 2021 by FUJINET CO., LTD.
 *
 * Last_Update 2021/07/16.
 * Version 1.00.
 */
package fjs.cs.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.FilterChain;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import fjs.cs.common.Constants;
import fjs.cs.dao.T001Dao;
import fjs.cs.dto.T001Dto;
import fjs.cs.dto.T002Dto;

/**
 * T001
 * 
 * @version 1.00
 * @since 1.00
 * @author Long-PH
 * 
 */
public class T001 extends HttpServlet {

	private static final long serialVersionUID = 1L;

	/**
	 * Init man hinh
	 * 
	 * @param HttpServletRequest  req
	 * @param HttpServletResponse resp
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		RequestDispatcher myRD = null;
		// Hien thi man hinh Login
		myRD = req.getRequestDispatcher(Constants.T001_LOGIN);
		myRD.forward(req, resp);
	}

	/**
	 * Event man hinh
	 * 
	 * @param HttpServletRequest  req
	 * @param HttpServletResponse resp
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("UTF-8");
		try {
			String user = req.getParameter("userName");
			String pass = req.getParameter("password");
			T001Dao loginDao = new T001Dao();
			T001Dto result = loginDao.checkLogin(user, pass);
			T001Dto getSession = loginDao.getSession(user);
			/**
			 * N蘯ｿu ﾄ惰ハg nh蘯ｭp thﾃ�nh cﾃｴng, chuy盻ハ hﾆｰ盻嬾g t盻嬖 trang T002_Search
			 * Ngoﾃ�i ra: Lﾆｰu thﾃｴng bﾃ｡o l盻擁 vﾃ� chuy盻ハ hﾆｰ盻嬾g trang T001_Login
			 * thﾃｴng bﾃ｡o l盻擁.
			 */
			if (result != null) {
				HttpSession session=req.getSession(); 
				session.setAttribute("psnCd", result.getPSN_CD());
		        session.setAttribute("name",getSession.getUSERNAME());  
		        resp.sendRedirect("/CustomerSystem/T002");
			} else {
				String message = Constants.MESSAGE_ERROR_USER_NOT_EXIST;
				req.setAttribute("message", message);
				RequestDispatcher dispatcher = req.getRequestDispatcher("/WEB-INF/jsp/T001.jsp");
				dispatcher.forward(req, resp);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

/**
font-size: 15px;
font-weight: 300;
line-height: 18px;
height: 36px;
margin: 10px;
overflow: hidden;
display: block;
display: -webkit-box;
-webkit-box-orient: vertical;
-webkit-line-clamp: 1;
width: 100px;
*/



/**
 * @(#)T002.java 16-00 2023/02/22
 *
 * Copyright(C) 2023 by TranVanToi  LTV
 *
 * Last_Update 2023/02/22.
 * Version 1.00.
 */

package fjs.cs.action;


import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * T002
 * 
 * @version 1.00
 * @since 1.00
 * @author toi_tv_ttv
 * 
 */
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.sun.org.apache.bcel.internal.generic.RETURN;

import fjs.cs.common.Constants;
import fjs.cs.dao.T001Dao;
import fjs.cs.dao.T002Dao;
import fjs.cs.dto.T001Dto;
import fjs.cs.dto.T002Dto;


public class T002 extends HttpServlet {
	private static final long serialVersionUID = 1L;
	/**
	 * Init man hinh
	 * 
	 * @param HttpServletRequest  req
	 * @param HttpServletResponse resp
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String indexPage = request.getParameter("index");
		if (indexPage == null) {
			indexPage = "1";
		}
		
		int index = Integer.parseInt(indexPage);
		request.setAttribute("tag", index);
		T002Dao dao = new T002Dao();
		
		//get data
		List<T002Dto> list = null;
		int count;
		try {
			list = dao.getData();
			request.setAttribute("listData", list);
			count = dao.getDataPage();
			int endpage = count/15;
			if (count % 15 != 0) {
				endpage++;
			}
			List<T002Dto> listPage = dao.pagingData(index);
			request.setAttribute("ListA", listPage);
			request.setAttribute("endP", endpage);
			request.getRequestDispatcher(Constants.T002_SEARCH);
			RequestDispatcher myRD = null;
			// Hien thi man hinh Search
			myRD = request.getRequestDispatcher(Constants.T002_SEARCH);
			myRD.forward(request, response);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Event man hinh
	 * 
	 * @param HttpServletRequest  request
	 * @param HttpServletResponse response
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		try {
			String name = request.getParameter("txtCustomerName");
			String sex = request.getParameter("browser");
			String birthdayFrom = request.getParameter("txtBirthdayFromName");
			String birthdayTo = request.getParameter("txtBirthdayToName");
			T002Dao daoSearch = new T002Dao();
			if (name == null || name.trim().isEmpty()) {
			    name = null;
			}
			if (sex == null || sex.trim().isEmpty()) {
			    sex = null;
			}
			if (birthdayFrom == null || birthdayFrom.trim().isEmpty()) {
			    birthdayFrom = null;
			}
			if (birthdayTo == null || birthdayTo.trim().isEmpty()) {
			    birthdayTo = null;
			}
			List<T002Dto> resultSearch = daoSearch.getDataSearch(name, sex, birthdayFrom, birthdayTo);
			
			request.setAttribute("listDataSearch", resultSearch);
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
			rd.forward(request, response);
			//L蘯･y data cﾃ｡c ﾃｴ checkbox ﾄ柁ｰ盻｣c checked
			String[] ids = request.getParameterValues("selectedValues");
			if (ids != null && ids.length > 0) {
			    String idList = String.join(",", ids);
			   
			    // Lo蘯｡i b盻� cﾃ｡c d蘯･u ngo蘯ｷc kﾃｩp trong chu盻擁
			    idList = idList.replace("[\"", "").replace("\"]", "");
			    String result = idList.replaceAll("[^\\d,]", "").replace("\"", "");
			    String[] result2 = result.split(",");
			    if (result2.length == 16) {
			    	String[] result3 = Arrays.copyOfRange(result2, 1, result2.length);
		    		daoSearch.deleteData(result3);
			    }else {
			    	for (int i = 0;i< result2.length; i++) {
				    	if (result2.length == 16) {
				    		daoSearch.deleteData(result2);
				    	}
				    	daoSearch.deleteData(result2);
				    }
			    }
			}	
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}




package fjs.cs.action;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import fjs.cs.common.Constants;
import fjs.cs.dao.T003Dao;
import fjs.cs.dto.T003Dto;

public class T003 extends HttpServlet {
	private static final long serialVersionUID = 1L;
	/**
	 * Init man hinh
	 * 
	 * @param HttpServletRequest  req
	 * @param HttpServletResponse resp
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		RequestDispatcher myRD = null;
		String id = req.getParameter("id");
		if (id != null) {
			T003Dto dto;
			try {
				dto = T003Dao.getCustomerById(Integer.parseInt(id));
				req.setAttribute("dto", dto);
			} catch (NumberFormatException | SQLException e) {
				e.printStackTrace();
			}
		}
		// Hien thi man hinh Edit
		myRD = req.getRequestDispatcher(Constants.T003_EDIT);
		myRD.forward(req, resp);
	}
	
	/**
	 * Event man hinh
	 * 
	 * @param HttpServletRequest  req
	 * @param HttpServletResponse resp
	 * @return RequestDispatcher
	 * @throws ServletException, IOException
	 * @since 1.00
	 */
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			String id = req.getParameter("userId");
			String name = req.getParameter("txtCustomerName");
			String sex = req.getParameter("cboSex");
			String birthday = req.getParameter("txtCustomerBirthday");
			String email = req.getParameter("txtCustomerEmail");
			String address = req.getParameter("txaAddress");
	        HttpSession session = req.getSession();
	        
	        /**
	         * Ki盻ノ tra n蘯ｿu id mﾃ� cﾃｳ d盻ｯ li盻㎡ thﾃｬ lﾃ� update
	         * Ngoﾃ�i ra: id khﾃｴng cﾃｳ d盻ｯ li盻㎡ lﾃ� save
	         */
	        int status = 0;
	        T003Dao dao = new T003Dao();
	        if (id == "") {
	        	T003Dto dtosave = new T003Dto();
	        	dtosave.setCUSTOMER_NAME(name);
	        	dtosave.setSEX(sex);
	        	dtosave.setBIRTHDAY(birthday);
	        	dtosave.setEMAIL(email);
	        	dtosave.setADDRESS(address);
	            status = dao.save(dtosave, session);
	        }else if (id != "") {	 
	        	T003Dto dto = new T003Dto();
		        dto.setCUSTOMER_ID(Integer.parseInt(id));
		        dto.setCUSTOMER_NAME(name);
		        dto.setSEX(sex);
		        dto.setBIRTHDAY(birthday);
		        dto.setEMAIL(email);
		        dto.setADDRESS(address);
	        	status = dao.update(dto, session);
	        }
	        if (status > 0) {
	            resp.sendRedirect("/CustomerSystem/T002");
	        }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}




/**
 * @(#)T001.java 01-00 2021/07/16
 *
 * Copyright(C) 2021 by FUJINET CO., LTD.
 *
 * Last_Update 2021/07/16
 * Version 1.00.
 */
package fjs.cs.common;

/**
 * Constants
 * 
 * @version 1.00
 * @since  1.00
 * @author Long-PH
 * 
 */
public class Constants {

	/* List Man Hinh */
	// T001(Login)
	public static final String T001_LOGIN = "/WEB-INF/jsp/T001.jsp";
	// T002(Search)
	public static final String T002_SEARCH = "/WEB-INF/jsp/T002.jsp";
	// T002(Edit)
	public static final String T003_EDIT = "/WEB-INF/jsp/T003.jsp";
	// Thong bao loi
	public static final String MESSAGE_ERROR_USER_NOT_EXIST = "ユーザーIDまたはパスワードが不正です。";
	
	public static final String MESSAGE_CHECKOFF = "行を選択してください。";
	//T002(Search)
	// Thong bao loi khong nhap duoc user
	public static final String USER_NOT_ERROR = "ユーザーIDを入力してください。";
	//Thong bao loi khong nhap duoc password
	public static final String PASSWORD_NOT_ERROR = "パスワードを入力してください。";
	//Thong bao loi chua checked
	public static final String CHECKED_NOT_ERROR = "行を選択してください。";
	//Thong bao sai dinh dang bitrhday from
	public static final String MESSAGE_ERROR_FROM = "Invalid Birthday (From).";
	//Thong bao sao dinh dang birthday to
	public static final String MESSAGE_ERROR_TO = "Invalid Birthday (To).";
	//Thông báo sai ngày bắt đầu lớn hơn ngày kết thúc.
	public static final String MESSAGE_ERROR_FROM_BIGGER_TO = "There is an error in the range input of Birthday";
	//Thông báo sai định dạng birthday
	//T003(Edit)
	public static final String MESSAGE_ERROR_BIRTHDAY = "誕生日が不正です。";
	//Thông báo lỗi sai định dạng email
	public static final String MESSAGE_ERROR_FORMAT_EMAIL = "メールアドレスが不正です。";
	// CSDL
	public static final String USER = "sa";
    public static final String PASS = "TranVanToi234";
	public static final String DB_DRIVER = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	public static final String CONNECTION_URL = "jdbc:sqlserver://TOI-TV-TTV-VM\\SQLEXPRESS:1433;databaseName=CustomerSystem";
	
}



package fjs.cs.common;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
	public Connection getConnection() throws SQLException {
		Connection connection = null;
		try {
			Class.forName(Constants.DB_DRIVER);
			String connectionURL = Constants.CONNECTION_URL;
			connection = DriverManager.getConnection(connectionURL, Constants.USER, Constants.PASS);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return connection;
	}
	
	public static Connection disconnectDB(Connection connection) throws SQLException {
		try {
			if (connection != null) {
				connection.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return connection;
	}
}




/**
 * @(#)T001Dao.java 01-00 2021/07/16
 *
 * Copyright(C) 2021 by FUJINET CO., LTD.
 *
 * Last_Update 2021/07/16
 * Version 1.00.
 */
package fjs.cs.dao;
/**
 * T001Dao
 * 
 * @version 1.00
 * @since  1.00
 * @author Long-PH
 * 
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import fjs.cs.common.DBConnection;
import fjs.cs.dto.T001Dto;
import fjs.cs.dto.T002Dto;

public class T001Dao {
	public T001Dto checkLogin(String user, String pass) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String query = "select COUNT(*) as CNT from MSTUSER where DELETE_YMD is null and USERID =? and PASSWORD =?";
			conn = new DBConnection().getConnection();
			ps = conn.prepareStatement(query);
			ps.setString(1, user);
			ps.setString(2, pass);
			rs = ps.executeQuery();
			while (rs.next()) {
		        int count = rs.getInt("CNT");
		        if (count == 1) {
		            T001Dto result = new T001Dto(user, pass, null, null);
		            return result;
		        } else {
		            return null;
		        }
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
		}
		return null;
	}
	
	public T001Dto getSession(String user) throws SQLException {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String query = "select * from MSTUSER where USERID =?";
			conn = new DBConnection().getConnection();
			ps = conn.prepareStatement(query);
			ps.setString(1, user);
			rs = ps.executeQuery();
			while (rs.next()) {
				T001Dto data = new T001Dto();
				data.setPSN_CD(rs.getString(1));
				data.setUSERID(rs.getString(2));
				data.setPASSWORD(rs.getString(3));
				data.setUSERNAME(rs.getString(4));
		         return data;
	        }
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
		}
		return null;
	}
}





package fjs.cs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import fjs.cs.common.DBConnection;
import fjs.cs.dto.T002Dto;

public class T002Dao {
	public List<T002Dto> getData() throws SQLException {
		List<T002Dto> list = new ArrayList<T002Dto>();
		Connection conn = null;
		try {
			String query = "SELECT CUSTOMER_ID, CUSTOMER_NAME,\r\n" + 
					"CASE WHEN SEX = 0 THEN 'Male' ELSE 'Female' END AS SEX,BIRTHDAY, ADDRESS\r\n" + 
					"FROM MSTCUSTOMER WHERE DELETE_YMD IS NULL ORDER BY CUSTOMER_ID";
			conn = new DBConnection().getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				T002Dto dataT002 = new T002Dto();
				dataT002.setCUSTOMER_ID(rs.getString(1));
				dataT002.setCUSTOMER_NAME(rs.getString(2));
				dataT002.setSEX(rs.getString(3));
				dataT002.setBIRTHDAY(rs.getString(4));
				dataT002.setADDRESS(rs.getString(5));
				list.add(dataT002);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
		}
		return list;
	}
	
	public List<T002Dto> getDataSearch(String name, String sex, String birthdayFrom, String birthdayTo) {
	    List<T002Dto> listSearch = new ArrayList<T002Dto>();
	    Connection conn = null;
	    try {
	        String query = "SELECT CUSTOMER_ID, CUSTOMER_NAME, CASE WHEN SEX = 0 THEN 'Male' else 'Female' end as SEX, BIRTHDAY, ADDRESS \r\n"
	                + "FROM MSTCUSTOMER\r\n"
	                + "WHERE 1=1 ";
	        if (name != null && !name.isEmpty()) {
	            query += "AND CUSTOMER_NAME LIKE ? ";
	        }
	        if (sex != null && !sex.isEmpty()) {
	            query += "AND SEX = ? ";
	        }
	        if (birthdayFrom != null && !birthdayFrom.isEmpty()) {
	            query += "AND BIRTHDAY >= ? ";
	        }
	        if (birthdayTo != null && !birthdayTo.isEmpty()) {
	            query += "AND BIRTHDAY <= ? ";
	        }
	        query += "ORDER BY CUSTOMER_ID;\r\n";
	       
	        conn =  new DBConnection().getConnection();
	        PreparedStatement ps = conn.prepareStatement(query);
	        int parameterIndex = 1;
	        if (name != null && !name.isEmpty()) {
	            ps.setString(parameterIndex++, "%" + name + "%");
	        }
	        if (sex != null && !sex.isEmpty()) {
	            ps.setString(parameterIndex++, sex);
	        }
	        if (birthdayFrom != null && !birthdayFrom.isEmpty()) {
	            ps.setString(parameterIndex++, birthdayFrom);
	        }
	        if (birthdayTo != null && !birthdayTo.isEmpty()) {
	            ps.setString(parameterIndex++, birthdayTo);
	        }
	        ResultSet rs = ps.executeQuery();
	        while(rs.next()) {
	            T002Dto dataT002Search = new T002Dto();
	            dataT002Search.setCUSTOMER_ID(rs.getString(1));
	            dataT002Search.setCUSTOMER_NAME(rs.getString(2));
	            dataT002Search.setSEX(rs.getString(3));
	            dataT002Search.setBIRTHDAY(rs.getString(4));
	            dataT002Search.setADDRESS(rs.getString(5));
	            listSearch.add(dataT002Search);
	        }
	        conn.close();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return listSearch;
	}


	
	public List<T002Dto> deleteData(String[] selecValue) throws SQLException {
	    List<T002Dto> listDelete = new ArrayList<T002Dto>();
	    Connection conn = null;
	    try {
	        String query = "UPDATE MSTCUSTOMER "
	                     + "SET Delete_YMD = CURRENT_TIMESTAMP "
	                     + "WHERE customer_Id IN (";
	        for (int i = 0; i < selecValue.length; i++) {
	        	String[] ids = selecValue[0].split(",");
	            for (int j = 0; j < ids.length; j++) {
	                query += "?,";
	            }
	        }
	        query = query.substring(0, query.length() - 1) + ")";
	        conn = new DBConnection().getConnection();
	        PreparedStatement ps = conn.prepareStatement(query);
	        for (int i = 0; i < selecValue.length; i++) {
	            ps.setLong(i + 1, Long.parseLong(selecValue[i]));
	        }
	        ps.executeUpdate();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }finally {
	    	DBConnection.disconnectDB(conn);
	    }
	    return listDelete;
	}
	
	
	public int getDataPage() throws SQLException {
		String query = "select count(*) from MSTCUSTOMER";
		Connection conn = null;
		try {
			conn = new DBConnection().getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				return rs.getInt(1);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
	    }
		return 0;
	}
	
	public List<T002Dto> pagingData(int index) throws SQLException {
		List<T002Dto> list = new ArrayList<>();
		Connection conn = null;
		String query = "select CUSTOMER_ID, CUSTOMER_NAME, CASE WHEN SEX = 0 THEN 'Male' else 'Female' end as SEX, BIRTHDAY, ADDRESS from MSTCUSTOMER order by CUSTOMER_ID OFFSET ? ROWS FETCH NEXT 15 ROWS ONLY";
		try {
			conn = new DBConnection().getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setInt(1, (index-1)*15);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				T002Dto datapagin = new T002Dto();
				datapagin.setCUSTOMER_ID(rs.getString(1));
				datapagin.setCUSTOMER_NAME(rs.getString(2));
				datapagin.setSEX(rs.getString(3));
				datapagin.setBIRTHDAY(rs.getString(4));
				datapagin.setADDRESS(rs.getString(5));
	            list.add(datapagin);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
	    }
		return list;
	}
	
}





package fjs.cs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import fjs.cs.common.DBConnection;
import fjs.cs.dto.T001Dto;
import fjs.cs.dto.T002Dto;
import fjs.cs.dto.T003Dto;

public class T003Dao {
	public int update(T003Dto u, HttpSession session) throws SQLException {
		int status = 0;
		Connection conn = null;
		try {
			conn = new DBConnection().getConnection();
			String query = "UPDATE MSTCUSTOMER SET CUSTOMER_NAME = ?, SEX = ?, BIRTHDAY = ?, EMAIL = ?, ADDRESS = ?, DELETE_YMD = NULL, UPDATE_YMD = CURRENT_TIMESTAMP, UPDATE_PSN_CD = (SELECT PSN_CD FROM mstuser WHERE USERID = ?) WHERE CUSTOMER_ID = ?";
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setString(1, u.getCUSTOMER_NAME());
			ps.setString(2, u.getSEX());
			ps.setString(3, u.getBIRTHDAY());
			ps.setString(4, u.getEMAIL());
			ps.setString(5, u.getADDRESS());
			ps.setString(6, (String) session.getAttribute("psnCd"));
			ps.setInt(7, u.getCUSTOMER_ID());
			status = ps.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBConnection.disconnectDB(conn);
		}
		return status;
	}

	public static T003Dto getCustomerById(int id) throws SQLException {
		T003Dto customerId = null;
		Connection conn = null;
		try {
			String query = "select * from MSTCUSTOMER where CUSTOMER_ID=?";
			conn = new DBConnection().getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				customerId = new T003Dto();
				customerId.setCUSTOMER_ID(rs.getInt("CUSTOMER_ID"));
				customerId.setCUSTOMER_NAME(rs.getString("CUSTOMER_NAME"));
				customerId.setSEX(rs.getString("SEX"));
				customerId.setBIRTHDAY(rs.getString("BIRTHDAY"));
				customerId.setEMAIL(rs.getString("Email"));
				customerId.setADDRESS(rs.getString("ADDRESS"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			DBConnection.disconnectDB(conn);
		}
		return customerId;
	}

	public int save(T003Dto save, HttpSession session) throws SQLException {
		int status = 0;
		Connection conn = null;
		try {
			String query = "INSERT INTO MSTCUSTOMER (CUSTOMER_ID, CUSTOMER_NAME, SEX, BIRTHDAY, EMAIL, ADDRESS, DELETE_YMD, INSERT_YMD, INSERT_PSN_CD, UPDATE_YMD, UPDATE_PSN_CD) \r\n" + 
					"VALUES (NEXT VALUE FOR SEQ_CUSTOMER_ID, ?, ?, ?, ?, ?, NULL, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)";
			conn = new DBConnection().getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setString(1, save.getCUSTOMER_NAME());
			ps.setString(2, save.getSEX());
			ps.setString(3, save.getBIRTHDAY());
			ps.setString(4, save.getEMAIL());
			ps.setString(5, save.getADDRESS());
			ps.setString(6, (String) session.getAttribute("psnCd"));
			ps.setString(7, (String) session.getAttribute("psnCd"));
			status = ps.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBConnection.disconnectDB(conn);
		}
		return status;
	}

}





/**
 * @(#)T001Dto.java 01-00 2021/07/16
 *
 * Copyright(C) 2021 by FUJINET CO., LTD.
 *
 * Last_Update 2021/07/16
 * Version 1.00.
 */
package fjs.cs.dto;

/**
 * T001Dto
 * 
 * @version 1.00
 * @since 1.00
 * @author Long-PH
 * 
 */
public class T001Dto {
	public String USERID, PASSWORD, PSN_CD, USERNAME;

	public T001Dto() {

	}

	public T001Dto(String uSERID, String pASSWORD, String pSN_CD, String uSERNAME) {
		super();
		USERID = uSERID;
		PASSWORD = pASSWORD;
		PSN_CD = pSN_CD;
		USERNAME = uSERNAME;
	}

	public String getUSERID() {
		return USERID;
	}

	public void setUSERID(String uSERID) {
		USERID = uSERID;
	}

	public String getPASSWORD() {
		return PASSWORD;
	}

	public void setPASSWORD(String pASSWORD) {
		PASSWORD = pASSWORD;
	}

	public String getPSN_CD() {
		return PSN_CD;
	}

	public void setPSN_CD(String pSN_CD) {
		PSN_CD = pSN_CD;
	}

	public String getUSERNAME() {
		return USERNAME;
	}

	public void setUSERNAME(String uSERNAME) {
		USERNAME = uSERNAME;
	}
}




package fjs.cs.dto;

public class T002Dto {
	public String CUSTOMER_ID, CUSTOMER_NAME, SEX, BIRTHDAY, ADDRESS;
	
	public T002Dto() {
		
	}
	
	public T002Dto(String cUSTOMER_ID, String cUSTOMER_NAME, String sEX, String bIRTHDAY, String aDDRESS) {
		super();
		CUSTOMER_ID = cUSTOMER_ID;
		CUSTOMER_NAME = cUSTOMER_NAME; 
		SEX = sEX;
		BIRTHDAY = bIRTHDAY;
		ADDRESS = aDDRESS;
	}

	public String getCUSTOMER_ID() {
		return CUSTOMER_ID;
	}

	public void setCUSTOMER_ID(String cUSTOMER_ID) {
		CUSTOMER_ID = cUSTOMER_ID;
	}

	public String getCUSTOMER_NAME() {
		return CUSTOMER_NAME;
	}

	public void setCUSTOMER_NAME(String cUSTOMER_NAME) {
		CUSTOMER_NAME = cUSTOMER_NAME;
	}

	public String getSEX() {
		return SEX;
	}

	public void setSEX(String sEX) {
		SEX = sEX;
	}

	public String getBIRTHDAY() {
		return BIRTHDAY;
	}

	public void setBIRTHDAY(String bIRTHDAY) {
		BIRTHDAY = bIRTHDAY;
	}

	public String getADDRESS() {
		return ADDRESS;
	}

	public void setADDRESS(String aDDRESS) {
		ADDRESS = aDDRESS;
	}
}




package fjs.cs.dto;

public class T003Dto {
	public int CUSTOMER_ID;
	public String  CUSTOMER_NAME, SEX, EMAIL, BIRTHDAY, ADDRESS;

	public T003Dto() {
		
	}

	public T003Dto(int cUSTOMER_ID, String cUSTOMER_NAME, String sEX, String eMAIL, String bIRTHDAY, String aDDRESS) {
		super();
		CUSTOMER_ID = cUSTOMER_ID;
		CUSTOMER_NAME = cUSTOMER_NAME;
		SEX = sEX;
		EMAIL = eMAIL;
		BIRTHDAY = bIRTHDAY;
		ADDRESS = aDDRESS;
	}

	public int getCUSTOMER_ID() {
		return CUSTOMER_ID;
	}

	public void setCUSTOMER_ID(int cUSTOMER_ID) {
		CUSTOMER_ID = cUSTOMER_ID;
	}

	public String getCUSTOMER_NAME() {
		return CUSTOMER_NAME;
	}

	public void setCUSTOMER_NAME(String cUSTOMER_NAME) {
		CUSTOMER_NAME = cUSTOMER_NAME;
	}

	public String getSEX() {
		return SEX;
	}

	public void setSEX(String sEX) {
		SEX = sEX;
	}

	public String getEMAIL() {
		return EMAIL;
	}

	public void setEMAIL(String eMAIL) {
		EMAIL = eMAIL;
	}

	public String getBIRTHDAY() {
		return BIRTHDAY;
	}

	public void setBIRTHDAY(String bIRTHDAY) {
		BIRTHDAY = bIRTHDAY;
	}

	public String getADDRESS() {
		return ADDRESS;
	}

	public void setADDRESS(String aDDRESS) {
		ADDRESS = aDDRESS;
	}
}




:root {
	-while-color: #fff; -
	-black-color: #000; -
	-text-color: #ccc; -
	-privary-key: #f60;
}

* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
	box-sizing: inherit;
}

html {
	font-size: 62.5%;
	line-height: 1.6rem;
	font-family: 'Roboto', sans-serif;
	box-sizing: border-box;
}
.footer {
	position: fixed;
    bottom: 20px;
    right: 0;
    left: 0;
    padding: 0px 15px;
}




#main {
	background-color: #ccffff;
	padding: 20px 15px;
	height: 969px;
}

.header-br {
	border: 1px solid #000000;
	margin-top: 30px;
}

.header-text {
	color: #ff0000;
	font-size: 35px;
}

.content-login__header h3 {
	color: #5066ff;
	margin-top: 170px;
	font-size: 40px;
	margin-bottom: 10px;
}

.content-text {
	font-size: 20px;
	margin-top: 10px;
}

.content-login {
	text-align: center;
}

.form-label {
	font-size: 20px;
}

#lblErrorMessage {
	color: #ff0000;
	font-size: 18px;
	padding: 30px;
}

.form-group__btn {
	margin-bottom: 425px;
}

.content-login__container {
	margin-top: 20px;
}

.form-submit {
	background-color: #c0c0c0;
	color: #000000;
}

#txtUserID {
	font-size: 30px;
}

#txtPassword {
	font-size: 30px;
}

.form-group__password {
	margin-top: 10px;
}

.form-group__btn {
	margin-top: 50px;
}

#btnClear {
	margin-left: 253px;
	margin-right: -67px;
}

.form-group__btn button {
	font-size: 20px;
	padding: 5px 25px;
}

.form-label__userID {
	padding-right: 21px;
}

.footer-text__copyright {
	font-size: 20px;
	margin-top: 5px;
}



.search-container {
	background-color: #ccffff;
}

.search-container__dan {
	margin-top: 2px;
}

.search-container__text {
	color: #000000;
	
}

.search-container__text_text {
	font-size: 16px;
}

.search-container__line {
	font-size: 10px;
	width: 100%;
	height: 10px;
	background-color: #3366ff;
	margin-top: 25px;
}

.search-container__context {
	padding-top: 20px;
	display: flex;
	justify-content: space-between;
	font-size: 16px;
}

.search-container__logo {
	justify-content: space-between;
}

.search-container__handalSearch {
	display: flex;
	margin-top: 30px;
	width: 100%;
	height: 60px;
	padding: 20px;
	background-color: #ffff99;
	    padding: 12px 0px;
}

.handalSearch-customerName {
	display: flex;
}

.handalSearch-customerSex {
	display: flex;
}

.handalSearch-BirthdayFrom {
	display: flex;
}

.handalSearch-btnSearch {
	display: flex;
	
}

#btnSearch {
	font-size: 16px;
    padding: 1px 17px;
    background-color: #c0c0c0;
}
.handalSearch-customercommon {
	line-height: 36px;
}

.search-container__handalSearch--margin {
	flex: 1;
}

.handalSearch-customerName__text {
	min-width: 150px;
}

.handalSearch-customerSex__text {
	min-width: 50px;
}

.handalSearch-BirthdayFrom__text {
	min-width: 70px;
}

.search-container__btnContext--chuyenhuong {
	display: flex;
	justify-content: space-between;
}

.search-container__btnContext--start button {
	font-size: 20px;
    
}

.search-container__btnContext--end button {
	font-size: 20px;
	padding: 2px;
}

.search-container__btnContext--start lable {
	margin-left: 15px;
}

.search-container__btnContext--end lable {
	margin-right: 15px;
}

.search-container__btnContext--chuyenhuong {
	margin: 15px 0;
}

.search-container__table {
	width: 100%;
}

table {
	border: 2px solid #339966;
	border-collapse: collapse;
	width: 100%;
}

table tr:nth-child(odd) {
	background-color: #ccffff;
}

table tr:nth-child(even) {
	background-color: #ffffff;
}

table tr:nth-child(1) {
	background-color: #339966;
}

th, td {
	text-align: left;
}

.search-container__btnnav {
	display: flex;
	margin-top: 20px;
}

.search-container__btnnav button {
	background-color: #c0c0c0;
}

.search-container__btnnav .search-container__nav-btnAdd {
	margin-right: 10px;
	padding: 2px 24px;
}

button a {
	text-decoration: none;
	padding: 2px 24px;
}

#cboSex {
	width: 100px;
}

#btnFirst a {
	padding: 2px 18px;
	background-color: #c0c0c0;
}

#btnPrevious a {
	padding: 2px 18px;
	background-color: #c0c0c0;
	color: #000;
}

#btnPreviouss a {
	padding: 2px 24px;
	background-color: #c0c0c0;
}

#btnNext a {
	background-color: #c0c0c0;
	color: #000;
}

#txtCustomerInput {
	
}
.searchtable-check {
	
}

.searchtable-id {
	font-weight: 300;
    line-height: 34px;
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    width: 70px;
}

.searchtable-sex {
	
}

.searchtable-birthday {
	
}

.searchtable-address {
	font-weight: 300;
	line-height: 34px;
	overflow: hidden;
	display: -webkit-box;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: 1;
	width: 250px;
}

.searchtable-name {
	font-weight: 300;
	line-height: 34px;
	overflow: hidden;
	display: -webkit-box;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: 1;
	width: 200px;
}



.edit-container__headerText{
	font-size: 16px;
}

.edit-container__wellcom {
	display: flex;
	justify-content: space-between;
}

.edit-container__wellcom {
	margin-top: 30px;
}

.line-br {
	width: 100%;
    height: 20px;
    background-color: #3366ff;
    font-size: 16px;
    color: #fff;
    padding: 5px 13px;
    margin-top: 25px;
}
.edit-container__content{
	margin: 0 0 100% 0;
	text-align: center;
}

.edit-container__content--error {
	font-size: 15px;
	color: #f00000;
	margin-top: 10px;
	height: 30px;
	width: 100%;
}

.edit-container__content-Id {
	display: flex;
    padding-top: 73px;
    justify-content: center;
}

.edit-container__content-IdText {
	margin-left: -522px;
	position: relative;
}

.edit-container__content-IdLable {
	position: absolute;
    margin-left: -13%;
}

.edit-container__content-Sex {
	display: flex;
	justify-content: center;
	align-content: center;
	margin-right: 291px;
}

.edit-container__content-Name {
	margin-top: 25px;
}

.edit-container__contentName-input {
	margin-right: 20px;
}

.edit-container__content-Sexlable {
	width: 147px;
	position: relative;
	margin-left: -19%;
}

.edit-container__contentBirthday-input {
	margin-right: 86px;
}

.edit-container__contentEmail-input {
	margin-right: 104px
}

.edit-container__contentAddress-input {
	margin-right: 88px;
}

.edit-container__btnContent {
	padding: 30px 66px;
}

.edit-container__btnContent button {
	padding: 10px 50px;
	background-color: #c0c0c0;
}

.edit-container__btnContent-Save {
    margin-right: 160px;
}

.edit-container__btnContent-margin {
	margin-top: 40px;
}

#cboSex {
	position: absolute;
    margin-left: 177px;
    height: 30px;
    width: 11%;
}

.cbooption {
	height: 50px;
    width: 11%;
}

.form-with__input {
	height: 40px;
    width: 25%;
}

#txaAddress {
	height: 80px;
    width: 25%;
    resize: none;
}

#txtCustomerEmail {	
	text-decoration: underline;
}




<footer class="footer">
		<div class="header-br"></div>
		<div class="footer-text__copyright">Copyright (c) 2000-2008
			FUJINET, All Rights Reserved.</div>
	</footer>
</div>


<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/T001.css"%>
</style>
</head>
<body>
	<div id="main">
		<div class="header">
			<h3 class="header-text">Training</h3>
			<div class="header-br"></div>
		</div>
		
		
		
		

var btnClear = document.getElementById("btnClear");
	btnClear.addEventListener('click', (event) => {
		event.preventDefault();
		document.getElementById("txtUserID").value = "";
		document.getElementById("txtPassword").value = "";
		document.getElementById("lblErrorMessage").innerHTML = "";
	});

	function checkInput () {
			var user = document.getElementById("txtUserID").value;
			var pass = document.getElementById("txtPassword").value;
			if (user == "") {
				document.getElementById("lblErrorMessage").innerHTML = '<%=errorMessageUser%>';
				return false;
			}
			if (pass == "") {
				document.getElementById("lblErrorMessage").innerHTML = '<%=errorMessagePassword%>';
				return false;
			}
			return true;
		
	}
	
	
	
	function deleteRows() {
	var checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
	var btnDeleteFa = document.querySelector(".search-container__nav-btnAdd");
	
	var selectedValues = [];
	for (var i = 0; i < checkboxes.length; i++) {
	  selectedValues.push(checkboxes[i].value);
	}
	
	if (selectedValues == "") {
		alert('<%=checkedNot%>');
		return false;
	}else {
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
		  if (this.readyState == 4 && this.status == 200) {
		    console.log(this.responseText);
		  }
		};
		xhttp.open("POST", "/CustomerSystem/T002", true);
		xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		xhttp.send("selectedValues=" + JSON.stringify(selectedValues));
	}
} 

	checkBox = (source) => {
		var checkBoxAll = document.getElementsByName("checkboxAll");
		for (var i = 0; i < checkBoxAll.length; i++) {
			checkBoxAll[i].checked = source.checked;
		}
	}
	
	isValidDate = (txtDate) => {
		var currVal = txtDate;
		if (currVal == '') {
			return false;
		}
		 var rxDatePattern = /^(\d{4})(\/|-)(\d{1,2})(\/|-)(\d{1,2})$/; 
		 var dtArray = currVal.match(rxDatePattern); 
		 
		 if (dtArray == null) 
		      return false;
		 //check for mm/dd/yyyy format.
		 dtMonth = dtArray[3];
		 dtDay = dtArray[5];
		 dtYear = dtArray[1];
		 
		 if (dtMonth < 1 || dtMonth > 12) {
			 return false;
		 }else if (dtDay < 1 || dtDay > 31) {
			 return false; 
		 }else if ((dtMonth==4 || dtMonth==6 || dtMonth==9 || dtMonth==11) && dtDay ==31) 
			 return false;
		 else if (dtMonth == 2) {
			 var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));
		        if (dtDay> 29 || (dtDay ==29 && !isleap)) 
		                return false;
		 }
		 return true;
	}
	
	function validateForm() {
		  var dateStringFrom = document.querySelector(".txtCustomerValidateFROM").value;
		  const dateStringTo = document.querySelector(".txtCustomerValidateTO").value;
		  if (dateStringFrom != "" || dateStringTo != "") {
		  if(!isValidDate(dateStringFrom)) {
				alert('<%=messageErrorFrom%>');
				return;
		  	}
		  if (!isValidDate(dateStringTo)) {
			  alert('<%=messageErrorTo%>');
			  return;
		  }
	  	 var dateFromUpdate = dateStringFrom.split("/").join("");
		 var dateToUpdate =  dateStringTo.split("/").join("");
		 if (dateFromUpdate > dateToUpdate) {
			alert('<%=messageErrorFromBiggerTo%>');
			return;
		 }
		
	}
		  
}
	
	
	const dateFrom = document.querySelector(".txtCustomerValidateFROM").value;
	const dateTo = document.querySelector(".txtCustomerValidateTO").value;
	
	
	
	isValidDate = (txtDate) => {
	var currVal = txtDate;
	if (currVal == '') {
		return false;
	}
	 var rxDatePattern = /^(\d{4})(\/|-)(\d{1,2})(\/|-)(\d{1,2})$/; 
	 var dtArray = currVal.match(rxDatePattern); 
	 
	 if (dtArray == null) 
	      return false;
	 //check for mm/dd/yyyy format.
	 dtMonth = dtArray[3];
	 dtDay = dtArray[5];
	 dtYear = dtArray[1];
	 
	 if (dtMonth < 1 || dtMonth > 12) {
		 return false;
	 }else if (dtDay < 1 || dtDay > 31) {
		 return false; 
	 }else if ((dtMonth==4 || dtMonth==6 || dtMonth==9 || dtMonth==11) && dtDay ==31) 
		 return false;
	 else if (dtMonth == 2) {
		 var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));
	        if (dtDay> 29 || (dtDay ==29 && !isleap)) 
	                return false;
	 }
	 return true;
}

function isGmail(input) {
	  // Biểu thức chính quy kiểm tra định dạng gmail
	  var gmailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
	  
	  // Kiểm tra định dạng email
	  if (input.match(gmailRegex)) {
	    return false;
	  } 
	 return true;
}

checkInput = () => {
	const dateStringBirthday= document.querySelector("#txtCustomerBirthday").value;
	const lblMessage = document.querySelector(".edit-container__content--error");
	var inputEmail = document.getElementById("txtCustomerEmail").value;
	  if(!isValidDate(dateStringBirthday)) {
		  lblMessage.innerHTML = '<%=messageErrorBirthday%>';
	    return false;
	  }
	  if (isGmail(inputEmail)) {
			lblMessage.innerHTML = '<%=messageErrorEmail%>';
			return false;
	  }
	  return true;
}

var btnClear = document.getElementById("btnClearEdit")
btnClear.addEventListener('click', (event) => {
		event.preventDefault();
		document.querySelector(".edit-container__content--error").innerHTML = "";
		document.querySelector("#txtCustomerName").value = "";
		document.querySelector("#txtCustomerBirthday").value = "";
		document.querySelector("#txtCustomerEmail").value = "";
		document.querySelector("#txaAddress").value = "";
	});

function forgetButon() {
	var a = document.querySelector(".edit-container__btnContent-Save").innerHTML = "Add New";
	console.log(a);
}



<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@page import="fjs.cs.dao.T003Dao,fjs.cs.common.Constants"%>  
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
  <%@include file="/WEB-INF/css/T001.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>

<title>Login - Training</title>
</head>
<body>
	<div id="main">
		<div class="header">
			<h3 class="header-text">Training</h3>
			<div class="header-br"></div>
		</div>
		<div class="content">
			<div class="content-text">Login</div>
			<div class="content-login">
				<form action="/CustomerSystem/T001" name="frmLogin" method="POST" onsubmit="return checkInput()" >
					<div class="content-login__header">
						<h3>LOGIN</h3>
						<label id="lblErrorMessage">
							<%
								if (request.getAttribute("message") != null) {
							%>
								<label><%=request.getAttribute("message")%></label> <%
							 }
							 %>
						
						</label>
					</div>
					<div class="content-login__container">

						<div class="form-group">
							<label for="fullname" class="form-label form-label__userID">User
								Id: </label> <input id="txtUserID" name="userName" maxlength="8"
								type="text" class="form-control">
						</div>
						<div class="form-group__password">
							<label for="password" class="form-label">Password: </label> <input
								id="txtPassword" name="password" type="password" maxlength="8"
								class="form-control">
						</div>
						<div class="form-group__btn">
							<button type="submit" id="btnLogin" class="form-submit">Login</button>
							<button type="button" id="btnClear" class="form-submit">Clear</button>
						</div>
					</div>
				</form>
			</div>
		</div>
		<footer class="footer">
			<div class="header-br"></div>
			<div class="footer-text__copyright">Copyright (c) 2000-2008
			FUJINET, All Rights Reserved.</div>
		</footer>
	</div>
</body>
<% String errorMessageUser = Constants.USER_NOT_ERROR; %>
<% String errorMessagePassword = Constants.PASSWORD_NOT_ERROR; %>
<script>
	<%@include file="/WEB-INF/javascript/T001.js"%>
</script>

</html>




<%@page import="java.awt.List"%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<%@page import="fjs.cs.dao.T003Dao,fjs.cs.common.Constants"%>  

<title>Search - Training</title>
</head>
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/T002.css"%>
</style>
<body>

<style type="text/jsp">
  <%@include file="/WEB-INF/include/header.jsp"%>
</style>

<div class = "search-container">
	<div class = "search-container__dan">
		<div class = "search-container__text search-container__text_text">
			Login > Search Customer
		</div>
	<div class = "search-container__context">
			<%if (session.getAttribute("name") != null) {%>
				<div class = "search-container__logo">
					<div>Welcome <%=session.getAttribute("name") %></div>
				</div>
			<%} %>
		
			<a href = "#" class = "search-container__logout search-container__text_text" onclick = "Logout() ">
    			Log Out
			</a>
			<script>
				function Logout() {
				    <% session.removeAttribute("name"); %>  // Xóa session "name"
				    
				}
			</script>
	</div>
	
	<div class = "search-container__line"></div>
	
	
<form id = "form-Search" action ="/CustomerSystem/T002" method = "POST" >
	<div class = "search-container__handalSearch">
		<div class = "search-container__handalSearch--margin handalSearch-customerName">
			<div class = "handalSearch-customercommon handalSearch-customerName__text search-container__text_text">Customer Name</div>
			<input id = "txtCustomerName" name = "txtCustomerName" maxLength = "50"/>
		</div>
		
		<div class = "search-container__handalSearch--margin handalSearch-customerSex">
			<div class = "handalSearch-customercommon handalSearch-customerSex__text search-container__text_text">Sex</div>
			<select name="browser" id = "cboSex">
				<option value=""></option>
		      	<option value="0">Male</option>
		     	 <option value="1">Female</option>
			</select>
		</div>
		
		<div class = "search-container__handalSearch--margin handalSearch-BirthdayFrom">
			<div class = "handalSearch-customercommon handalSearch-BirthdayFrom__text search-container__text_text">Birthday</div>
			<input id = "txtBirthdayForm" class = "txtCustomerValidateFROM" name = "txtBirthdayFromName" maxLength = "10"/>
			<lable class = "handalSearch-BirthdayFrom__ngangcach">～</lable>
			<input id = "txtBirthdayTo" class = "txtCustomerValidateTO" name = "txtBirthdayToName" maxLength = "10"/>
		</div>
		
		<div class = "handalSearch-btnSearch">
			<button type = "submit" id = "btnSearch" onclick ="validateForm()">Search</button>
		</div>
	</div>
</form>
	
	<div class = "search-container__btnContext--chuyenhuong">
		<div class = "search-container__btnContext--start">
					<button id = "btnFirst" disabled style="pointer-events: none;"><a href="#"><<</a></button>
					<button id = "btnPrevious" disabled style="pointer-events: none;"><a href="#"><</a></button>
			<%
				if (request.getAttribute("ListA") != null) {
			%>
				
				<c:if test="${tag == 1 and listData.size() <= 15 }">				
					<button id = "btnFirst" disabled style="pointer-events: none;"><a href="#"><<</a></button>
					<button id = "btnPrevious" disabled style="pointer-events: none;"><a href="#"><</a></button>
				</c:if>
				<c:if test="${tag > 1 }">	
					<button id = "btnFirst"><a href="/CustomerSystem/T002?index=<%=1 %>"><<</a></button>			
					<button id = "btnPrevious"><a href="/CustomerSystem/T002?index=${tag-1}"><</a></button>
				</c:if>
			<%
				}
			%>
			
			<lable class = "search-container__btnContext--textstart search-container__text_text">Previous</lable>
		</div>
		
		<div class = "search-container__btnContext--end">
			<lable class = "search-container__btnContext--textend search-container__text_text">Next</lable>
			<%
				if (request.getAttribute("ListA") == null) {
			%>
				<button id = "btnNext" disabled style="pointer-events: none;"><a href="#">></a></button>
				<button id="btnPrevious" disabled style="pointer-events: none;"><a href="#">>></a></button>
			<%
				}
			%>
			
			<%
				if (request.getAttribute("ListA") != null) {
				int endP = (Integer) request.getAttribute("endP"); 
			%>
			<c:if test="${tag >= endP}">			
				<button id = "btnNext" disabled style="pointer-events: none;"><a href="#">></a></button>
				<button id="btnPrevious" disabled style="pointer-events: none;"><a href="#">>></a></button>
			</c:if>
			<c:if test="${tag < endP}">			
				<button id = "btnNext" ><a href="/CustomerSystem/T002?index=${tag+1}">></a></button>
				<button id="btnPrevious"><a href="/CustomerSystem/T002?index=<%= endP %>">>></a></button>
			</c:if>		
			<%
				}
			%>
		</div>
	</div>
	<form action ="/CustomerSystem/T002" method = "POST" onsubmit = "return deleteRows();">
	<table class = "search-container__table">
        <tr class = "search-container__table--tieude">
        	<th class = "searchtable-trcheck"><input type="checkbox" id = "checkAll" name="checkboxAll" value="" onclick = "checkBox(this)"></th>
            <th class = "searchtable-trid">Customer ID</th>
            <th class = "searchtable-trname">Customer Name</th>
            <th class = "searchtable-trsex">Sex</th>
            <th class = "searchtable-trbirthday">Birthday</th>
            <th class = "searchtable-traddress">Address</th>
        </tr>
	<c:choose>
    <c:when test="${not empty listDataSearch}">
        <c:forEach items="${listDataSearch}" var="dept">
            <tr>
                <td class = "searchtable-check"><input type="checkbox" name="checkboxAll" value="${dept.CUSTOMER_ID}"></td>
                <td ><a href="/CustomerSystem/T003?id=${dept.CUSTOMER_ID}" class = "searchtable-id"> ${dept.CUSTOMER_ID} </a></td>
                <td class = "searchtable-name">${dept.CUSTOMER_NAME }</td>
                <td class = "searchtable-sex">${dept.SEX}</td>
                <td class = "searchtable-birthday">${dept.BIRTHDAY}</td>
                <td class = "searchtable-address">${dept.ADDRESS}</td>
            </tr>
        </c:forEach>
    </c:when>
    <c:when test="${not empty ListA}">
        <c:forEach items="${ListA}" var="dept">
            <tr>
                <td class = "searchtable-check"><input type="checkbox" name="checkboxAll" value="${dept.CUSTOMER_ID}"></td>
                <td ><a href="/CustomerSystem/T003?id=${dept.CUSTOMER_ID}" class = "searchtable-id"> ${dept.CUSTOMER_ID} </a></td>
                <td class = "searchtable-name">${dept.CUSTOMER_NAME }</td>
                <td class = "searchtable-sex">${dept.SEX}</td>
                <td class = "searchtable-birthday">${dept.BIRTHDAY}</td>
                <td class = "searchtable-address">${dept.ADDRESS}</td>
            </tr>
        </c:forEach>
    </c:when>
    <c:otherwise>
        <c:forEach items="${ListA}" var="dept">
            <tr>
                <td class = "searchtable-check"><input type="checkbox" name="checkboxAll" value="${dept.CUSTOMER_ID}"></td>
                <td ><a href="/CustomerSystem/T003?id=${dept.CUSTOMER_ID}" class = "searchtable-id"> ${dept.CUSTOMER_ID} </a></td>
                <td class = "searchtable-name">${dept.CUSTOMER_NAME }</td>
                <td class = "searchtable-sex">${dept.SEX}</td>
                <td class = "searchtable-birthday">${dept.BIRTHDAY}</td>
                <td class = "searchtable-address">${dept.ADDRESS}</td>
            </tr>
        </c:forEach>
    </c:otherwise>
	</c:choose>
    </table>
	<div class = "search-container__btnnav">
		<button class = "search-container__nav-btnAdd"><a href="/CustomerSystem/T003" >Add new</a></button>
			<%
				if (request.getAttribute("ListA") != null) {
			%>
				<button type = "submit"  class = "search-container__nav-btnAdd" >Delete</button>
			<%
				}
			%>
			
			<%
				if (request.getAttribute("ListA") == null) {
			%>
			<button type = "submit" disabled style="pointer-events: none;" onclick="deleteRows()"class = "search-container__nav-btnAdd" >Delete</button>
			<%
				}
			%>
		</div>
	</form>
	</div>
	<footer class="footer">
		<div class="header-br"></div>
		<div class="footer-text__copyright">Copyright (c) 2000-2008
			FUJINET, All Rights Reserved.</div>
	</footer>
</div>
</div>
<%String checkedNot = Constants.CHECKED_NOT_ERROR; %>
<%String messageErrorTo = Constants.MESSAGE_ERROR_TO; %>
<%String messageErrorFrom = Constants.MESSAGE_ERROR_FROM; %>
<%String messageErrorFromBiggerTo = Constants.MESSAGE_ERROR_FROM_BIGGER_TO; %>
<script>
	<%@include file="/WEB-INF/javascript/T002.js"%>
</script>

</body>
</html>





<%@page import="java.awt.List"%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
<%@ page import="fjs.cs.dao.T003Dao,fjs.cs.common.Constants" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
  <%@include file="/WEB-INF/css/T001.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/T003.css"%>
</style>
<style type="text/css">
  <%@include file="/WEB-INF/css/common.css"%>
</style>
<title>Edit - Training</title>
</head>
<body>
	<div id="main">
		<div class="header">
			<h3 class="header-text">Training</h3>
			<div class="header-br"></div>
		</div>
		<div class = "edit-container">
			<div class = "edit-container__header">
				<span class = "edit-container__headerText edit-container__headerText">Login > Search Customer > Edit Customer Info</span>
				<div class = "edit-container__wellcom">
				<%if (session.getAttribute("name") != null) {%>
				<div class = "edit-container__wellcomLeft edit-container__headerText">
						<div>Welcome <%=session.getAttribute("name") %></div>
				</div>
				<%} %>
					<div class = "edit-container__wellcomRight edit-container__headerText"><a href = "#">Log Out</a></div>
				</div>
			<div class = "line-br">Edit</div>
		</div>
	<form action = "/CustomerSystem/T003" method = "POST" onsubmit = "return checkInput()">
		<div class = "edit-container__content">
			<div class = "edit-container__content--error"></div>
			
			<div class = "edit-container__content-Id">
				<div class = "edit-container__content-IdText edit-container__headerText">Customser Id</div>
				<lable for="userId" class = "edit-container__content-IdLable edit-container__headerText" id = "lblCustomerID" name = "lblCustomerID">${dto.CUSTOMER_ID}</lable>
				<input type="text" hidden id="userId" name="userId" value="${dto.CUSTOMER_ID}">
			</div>
			
			<div class = "edit-container__content-Name">
				<lable class = "edit-container__contentName-input edit-container__headerText">Customser Name</lable>
				<input id = "txtCustomerName" type="text" class = "form-with__input" name = "txtCustomerName" maxlenght = "50" value = "${dto.CUSTOMER_NAME}"/>
			</div>
			
			<div class = "edit-container__content-Sex edit-container__btnContent-margin">
				<div class = "edit-container__content-Sexlable edit-container__headerText">Sex</div>
				<select  id="cboSex" name = "cboSex">
				  <option class = "cbooption" value=""></option>
				  <option class = "cbooption" value="0" ${dto.SEX == '0' ? 'selected' : ''}>Male</option>
				  <option class = "cbooption" value="1" ${dto.SEX == '1' ? 'selected' : ''}>Female</option>
				</select>
			</div>
			
			<div class = "edit-container__content-Birthday edit-container__btnContent-margin">
				<lable class = "edit-container__contentBirthday-input edit-container__headerText">Birthday</lable>
				<input id = "txtCustomerBirthday"  class = "form-with__input" name = "txtCustomerBirthday" maxlenght = 50 value= "${dto.BIRTHDAY }"/>
			</div>
			
			<div class = "edit-container__content-Email edit-container__btnContent-margin">
				<lable class = "edit-container__contentEmail-input edit-container__headerText">Email</lable>
				<input id = "txtCustomerEmail" type="text" class = "form-with__input" name ="txtCustomerEmail" maxlenght = 50 value="${dto.EMAIL }"/>
			</div>
			
			<div class = "edit-container__content-Address edit-container__btnContent-margin">
				<lable class = "edit-container__contentAddress-input edit-container__headerText">Address</lable>
				<textarea id="txaAddress" type="text" maxlength="256"  name = "txaAddress">${dto.ADDRESS}</textarea>
			</div>
			
			<div class = "edit-container__btnContent">
			<c:if test = "${empty dto.CUSTOMER_ID}">
				<button type = "submit" class = "edit-container__btnContent-Save">Add New</button>
			</c:if>
			<c:if test = "${not empty dto.CUSTOMER_ID}">
				<button type = "submit" class = "edit-container__btnContent-Save">Save</button>
			</c:if>
				<button  id = "btnClearEdit" class = "edit-container__btnContent-Clear">Clear</button>
			</div>
			
		</div>
	</form>
			
			
		</div>
		<footer class="footer">
			<div class="header-br"></div>
			<div class="footer-text__copyright">Copyright (c) 2000-2008
			FUJINET, All Rights Reserved.</div>
		</footer>
	</div>
	<%String messageErrorBirthday = Constants.MESSAGE_ERROR_BIRTHDAY; %>
	<%String messageErrorEmail = Constants.MESSAGE_ERROR_FORMAT_EMAIL; %>
	<script>
		<%@include file ="/WEB-INF/javascript/T003.js"%>
	</script>
	
</body>
</html>




