<bean:message key="LoginBean.username.required" var="usernameError"/>
<c:if test="${not empty usernameError}">
    <div id="username_error">${usernameError}</div>
</c:if>

<bean:message key="LoginBean.paddword.required" var="passwordError"/>
<c:if test="${not empty passwordError}">
    <div id="password_error">${passwordError}</div>
</c:if>

							
							
							
							
							
							public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
		ActionErrors error = new ActionErrors();
		if (getUSERID() == null && getUSERID() == null) {
			return error;
		}
		if (getUSERID() == null || getUSERID().trim().isEmpty() && !getPASSWORD().isEmpty()) {
			error.add("username", new ActionMessage("LoginBean.username.required"));
			return error;
		}
		if (getPASSWORD() == null || getUSERID().trim().isEmpty() && getUSERID().isEmpty()) {
			error.add("paddword", new ActionMessage("LoginBean.paddword.required"));
			return error;
		}
		return error;
		
	}








The Six Basic Steps in Using 
Struts: Updates for Bean Use
1. Modify struts-config.xml. 
Use WEB-INF/struts-config.xml to: 
– Map incoming .do addresses to Action classes 
– Map return conditions to JSP pages 
– Declare any form beans that are being used.
– Restart server after modifying struts-config.xml. 
2. Define a form bean.
– This bean extends ActionForm and represents the data 
submitted by the user. It is automatically populated 
when the input form is submitted. More precisely:
1. The reset method is called (useful for session-scoped beans)
2. For each incoming request parameter, the corresponding setter 
method is called
3. The validate method is called (possibly preventing the Action)



The Six Basic Steps in Using 
Struts: Updates for Bean Use
3. Create results beans.
– These are normal beans of the sort used in MVC when 
implemented directly with RequestDispatcher. That is, 
they represent the results of the business logic and data 
access code. These beans are stored in request, session, 
or application scope with the setAttribute method of 
HttpServletRequest, HttpSession, or ServletContext, 
just as in normal non-Struts applications. 
4. Define an Action class to handle requests.
– Rather than calling request.getParameter explicitly as in 
the previous example, the execute method casts the 
ActionForm argument to the specific form bean class, 
then uses getter methods to access the properties of the 
object



The Six Basic Steps in Using 
Struts: Updates for Bean Use
5. Create form that invokes blah.do.
– For now, we will use static HTML 
• Later, we will use the html:form tag to guarantee that the 
textfield names correspond to the bean property names, and to 
make it easy to fill in the form based on values in the app
• Later, we will also use bean:message to output fixed strings 
from a properties file
6. Display results in JSP.
– The JSP page uses the bean:write tag to output 
properties of the form and result beans. 
– It may also use the bean:message tag to output standard 
messages and text labels that are defined in a properties 
file (resource bundle). 


























Step 6 (Display Results in JSP) 
Alternatives for Beans
• Use the JSP 2.0 expression language. 
– This is perhaps the best option if the server supports JSP 2.0. In 
these examples, we will assume that the application needs to run on 
multiple servers, some of which support only JSP 1.2. 
• Use the Struts bean:write tag. 
– This is by far the most common approach when using Struts. Note 
that, unlike c:out and the JSP 2.0 expression language, bean:write 
automatically filters special HTML characters, replacing < with &lt; 
and > with &gt;. You can disable this behavior by specifying
<bean:write name="beanName" 
property="beanProperty"
filter="false">
– So, in this example we use bean:write. Before we do so, however,
we have to import the "bean" tag library as follows. 
<%@ taglib uri="http://struts.apache.org/tags-bean" 
prefix="bean" %>








Step 6 (Display Results in JSP) 
First Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Illegal Email Address</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Illegal Email Address</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean"
prefix="bean" %>
The address
"<bean:write name="userFormBean" property="email"/>"
is not of the form username@hostname (e.g.,
<bean:write name="suggestionBean" property="email"/>).
<P>
Please <A HREF="register1.jsp">try again</A>.
</CENTER>
</BODY></HTML>





Step 6 (Display Results in JSP) 
Second Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Illegal Password</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>Illegal Password</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean"
prefix="bean" %>
The password
"<bean:write name="userFormBean" property="password"/>"
is too short; it must contain at least six characters.
Here is a possible password:
<bean:write name="suggestionBean" property="password"/>.
<P>
Please <A HREF="register1.jsp">try again</A>.
</CENTER>
</BODY></HTML>





Step 6 (Display Results in JSP) 
Third Possible Page
<!DOCTYPE ...>
<HTML>
<HEAD><TITLE>Success</TITLE></HEAD>
<BODY BGCOLOR="#FDF5E6">
<CENTER>
<H1>You have registered successfully.</H1>
<%@ taglib uri="http://struts.apache.org/tags-bean" 
prefix="bean" %>
<UL>
<LI>Email Address: 
<bean:write name="userFormBean" property="email"/>
<LI>Password: 
<bean:write name="userFormBean" property="password"/>
</UL>
Congratulations
</CENTER>
</BODY></HTML>


<global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
         <forward
        	name="success"
        	path="/pages/T002.jsp"/>
        	
        <forward
        	name="T001"
        	path="/T001.do"/>
        	
       	<forward
        	name="T003"
        	path="/pages/T001.jsp"/>
    </global-forwards>
    
    
    
    
    
    
    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/T001"
            type="fjs.cs.action.T001">
    
        </action>
       
      
    <!-- sample input and input submit actions

        <action
            path="/Input"
            type="org.apache.struts.actions.ForwardAction"
            parameter="/pages/Input.jsp"/>

        <action
            path="/InputSubmit"
            type="app.InputAction"
            name="inputForm"
            scope="request"
            validate="true"
            input="/pages/Input.jsp"/>

            <action
                path="/edit*"
                type="app.Edit{1}Action"
                name="inputForm"
                scope="request"
                validate="true"
                input="/pages/Edit{1}.jsp"/>

    end samples -->
    </action-mappings>
    
    
    
    
    <form action="/T001.do" name="frmLogin" method="POST" >
					<div class="content-login__header">
						<h3>LOGIN</h3>
						<label id="lblErrorMessage">
						</label>
					</div>
					<div class="content-login__container">

						<div class="form-group">
							<label for="fullname" class="form-label form-label__userID">User
								Id: </label> <input id="txtUserID" name="userName" maxlength="8"
								type="text" class="form-control">
						</div>
						<div class="form-group__password">
							<label for="password" class="form-label">Password: </label> <input
								id="txtPassword" name="password" type="password" maxlength="8"
								class="form-control">
						</div>
						<div class="form-group__btn">
							<button type="submit" id="btnLogin" class="form-submit">Login</button>
							<button type="button" id="btnClear" class="form-submit">Clear</button>
						</div>
					</div>s
				</form>
				
				
				
				
				
public class T001 extends Action {
	public ActionForward execute(ActionMapping mapping, ActionForm form, 
		HttpServletRequest request, HttpServletResponse response) throws Exception {
		try {
			String user = request.getParameter("userName");
			String pass = request.getParameter("password");
//			String message = "";
//			T001Dao loginDao = new T001Dao();
//			T001Dto result = loginDao.checkLogin(user, pass);
//			
//			if (result != null) {
//				message = "success";
//				return(mapping.findForward("success"));
//			}else {
//				message = "error";
//			}
			if (Integer.parseInt(user) == 123){
				return(mapping.findForward("success"));
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return(mapping.findForward("T003"));
		
	}d






<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE struts-config PUBLIC
          "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"
          "http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">

<!--
     This is a blank Struts configuration file with an example
     welcome action/page and other commented sample elements.

     Tiles and the Struts Validator are configured using the factory defaults
     and are ready-to-use.

     NOTE: If you have a generator tool to create the corresponding Java classes
     for you, you could include the details in the "form-bean" declarations.
     Otherwise, you would only define the "form-bean" element itself, with the
     corresponding "name" and "type" attributes, as shown here.
-->


<struts-config>

<!-- ============================================ Data Source Configuration -->
<!--
<data-sources>
<data-source type="org.apache.commons.dbcp.BasicDataSource">
    <set-property
      property="driverClassName"
      value="org.postgresql.Driver" />
    <set-property
      property="url"
      value="jdbc:postgresql://localhost/mydatabase" />
    <set-property
      property="username"
      value="me" />
    <set-property
      property="password"
      value="test" />
    <set-property
      property="maxActive"
      value="10" />
    <set-property
      property="maxWait"
      value="5000" />
    <set-property
      property="defaultAutoCommit"
      value="false" />
    <set-property
      property="defaultReadOnly"
      value="false" />
    <set-property
      property="validationQuery"
      value="SELECT COUNT(*) FROM market" />
</data-source>
</data-sources>
-->

<!-- ================================================ Form Bean Definitions -->

    <form-beans>
    <!-- sample form bean descriptor for an ActionForm
        <form-bean
            name="inputForm"
            type="app.InputForm"/>
    end sample -->

    <!-- sample form bean descriptor for a DynaActionForm
        <form-bean
            name="logonForm"
            type="org.apache.struts.action.DynaActionForm">
            <form-property
                name="username"
                type="java.lang.String"/>
            <form-property
                name="password"
                type="java.lang.String"/>
       </form-bean>
    end sample -->
    </form-beans>


<!-- ========================================= Global Exception Definitions -->

    <global-exceptions>
        <!-- sample exception handler
        <exception
            key="expired.password"
            type="app.ExpiredPasswordException"
            path="/changePassword.jsp"/>
        end sample -->
    </global-exceptions>


<!-- =========================================== Global Forward Definitions -->
	
    <global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
        <forward
            name="wellcome"
            path="/pages/T001.jsp"/>
       
    </global-forwards>
    
    <global-forwards>
        <!-- Default forward to "Welcome" action -->
        <!-- Demonstrates using index.jsp to forward -->
         <forward
        	name="successs"
        	path="/pages/T002.jsp"/>
        	
        <forward
        	name="T001"
        	path="/pages/T001.jsp"/>
    </global-forwards>

	
<!-- =========================================== Action Mapping Definitions -->

    <action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/InputSubmit"
            type="fjs.cs.coreservlets.T001"
            parameter="/pages/T001.jsp">
        </action>
       
        <action
            path="/T002"
            forward="/pages/T002.jsp">
            
        </action>
    <!-- sample input and input submit actions

        <action
            path="/Input"
            type="org.apache.struts.actions.ForwardAction"
            parameter="/pages/Input.jsp"/>

        <action
            path="/InputSubmit"
            type="app.InputAction"
            name="inputForm"
            scope="request"
            validate="true"
            input="/pages/Input.jsp"/>

            <action
                path="/edit*"
                type="app.Edit{1}Action"
                name="inputForm"
                scope="request"
                validate="true"
                input="/pages/Edit{1}.jsp"/>

    end samples -->
    </action-mappings>
<!-- ============================================= Controller Configuration -->

    <controller
       processorClass="org.apache.struts.tiles.TilesRequestProcessor"/>


<!-- ======================================== Message Resources Definitions -->

    <message-resources parameter="MessageResources" />


<!-- =============================================== Plug Ins Configuration -->

  <!-- ======================================================= Tiles plugin -->
  <!--
     This plugin initialize Tiles definition factory. This later can takes some
	 parameters explained here after. The plugin first read parameters from
	 web.xml, thenoverload them with parameters defined here. All parameters
	 are optional.
     The plugin should be declared in each struts-config file.
       - definitions-config: (optional)
            Specify configuration file names. There can be several comma
		    separated file names (default: ?? )
       - moduleAware: (optional - struts1.1)
            Specify if the Tiles definition factory is module aware. If true
            (default), there will be one factory for each Struts module.
			If false, there will be one common factory for all module. In this
            later case, it is still needed to declare one plugin per module.
            The factory will be initialized with parameters found in the first
            initialized plugin (generally the one associated with the default
            module).
			  true : One factory per module. (default)
			  false : one single shared factory for all modules
	   - definitions-parser-validate: (optional)
	        Specify if xml parser should validate the Tiles configuration file.
			  true : validate. DTD should be specified in file header (default)
			  false : no validation

	  Paths found in Tiles definitions are relative to the main context.
  -->

    <plug-in className="org.apache.struts.tiles.TilesPlugin" >

      <!-- Path to XML definition file -->
      <set-property property="definitions-config"
                       value="/WEB-INF/tiles-defs.xml" />
      <!-- Set Module-awareness to true -->
      <set-property property="moduleAware" value="true" />
    </plug-in>


  <!-- =================================================== Validator plugin -->

  <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
    <set-property
        property="pathnames"
        value="/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml"/>
  </plug-in>
</struts-config>








































<form action="/InputSubmit" name="frmLogin" method="POST" >


<action-mappings>
            <!-- Default "Welcome" action -->
            <!-- Forwards to Welcome.jsp -->
        <action
            path="/InputSubmit"
            type="fjs.cs.coreservlets.T001">
        </action>
       
       </action-mappings> 





create database baitap
create table KHACHHANG (
	MAKH char(4),
	HOTEN varchar(40),
	DCHI varchar(50),
	SODT varchar(50),
	NGSINH smalldatetime,
	NGDK smalldatetime,
	DOANHSO money
)
select * from KHACHHANG
INSERT INTO KHACHHANG(MAKH, HOTEN, DCHI, SODT, NGSINH, NGDK, DOANHSO) 
VALUES
('KH01', 'Nguyen Van A', '731 Tran Hung Dao, Q5 HCM', '08823451', '1960-10-22', '2006-07-22', 13060000),
('KH02', 'Tran Ngoc Han', '23/05 Nguyen Trai Q5 HCM', '0908256478', '1974-04-03', '2006-07-30', 280000);

('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),
('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),
('KH01','Nguyen Van A','731 Tran Hung Dao, Q5 HCM','08823451','22/10/1960','22/07/2006','13.060.000'),

create table NHANVIEN (
	MANV char(4),
	HOTEN varchar(40),
	SODT varchar(20),
	NGVL smalldatetime,
)
select * from NHANVIEN

INSERT INTO NHANVIEN(MANV, HOTEN, SODT, NGVL) 
VALUES ('NV01', 'Nguyen Nhu Nhut', '0927345678','2006-04-03'),
('NV02', 'Le Thi Phi Yen', '0927345678','2006-04-21'),
('NV03', 'Nguyen Van B', '0927345678','2006-04-27'),
('NV04', 'Ngo Thanh Tuan', '0927345678','2006-04-24'),
('NV05', 'Nguyen Thi Truc Thanh', '0927345678','2006-07-20');


create table SANPHAM (
	MASP char(4),
	TENSP varchar(40),
	DVT varchar(20),
	NUOCSX varchar(40),
	GIA money
)
select * from SANPHAM


INSERT INTO SANPHAM(MASP, TENSP, DVT, NUOCSX, GIA) 
VALUES ('BC01', 'But Chi', 'Cay','SingGaPore', 3000),
('BC02', 'But Chi', 'Cay','SingGaPore', 5000),
('BC03', 'But Chi', 'Cay','SingGaPore', 5000),
('BC04', 'But Chi', 'Cay','SingGaPore', 6000),
('TV01', 'Tap 100  giay mong', 'Quyen','Trung Quoc', 7000);



create table HOADON(
	SOHD int,
	NGHD smalldatetime,
	MAKH char(4),
	MANV char(4),
	TRIGIA money
)

INSERT INTO HOADON(SOHD, NGHD, MAKH, MANV, TRIGIA) 
VALUES ('1001', '2006-03-23', 'KH01','NV01', 32000),
('1002', '2006-03-12', 'KH01','NV02', 52000),
('1003', '2006-03-21', 'KH02','NV01', 52000),
('1004', '2006-03-22', 'KH01','NV01', 16000),
('1005', '2006-03-24', 'KH01','NV01', 73000);

create table CTHD(
	SOHD int,
	MASP char(4),
	SL int
)

INSERT INTO CTHD(SOHD, MASP, SL) 
VALUES ('1001', 'TV02', 10),
('1001', 'TV02', 10),
('1002', 'ST01', 3),
('1003', 'TV02', 4),
('1004', 'TV02', 5);

alter table SANPHAM add GHICHU varchar(20)
alter table KHACHHANG  add LOAIKH  tinyint
alter table SANPHAM alter column GHICHU varchar(100)
-- 1.5
alter table SANPHAM drop column GHICHU
