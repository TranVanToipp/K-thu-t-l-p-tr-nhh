


protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html");
    String name = request.getParameter("txtCustomerName");
    String sex = request.getParameter("browser");
    String birthdayFrom = request.getParameter("txtBirthdayFromName");
    String birthdayTo = request.getParameter("txtBirthdayToName");

    validateDates(request, birthdayFrom, birthdayTo);
    deleteData(request, response);
    paginateData(request, response, name, sex, birthdayFrom, birthdayTo);
    //...
}

private void validateDates(HttpServletRequest request, String birthdayFrom, String birthdayTo) throws ServletException, IOException {
    if (birthdayFrom != null && !birthdayFrom.isEmpty() && !isValidDate(birthdayFrom)) {
        String messagebirthdayfrom = Constants.MESSAGE_ERROR_FROM;
        request.setAttribute("dataFrom", birthdayFrom);
        request.setAttribute("messageFrom", messagebirthdayfrom);
        RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
        rd.forward(request, response);
        return;
    }
    if (birthdayTo != null && !birthdayTo.isEmpty() && !isValidDate(birthdayTo)) {
        String messagebirthTo = Constants.MESSAGE_ERROR_TO;
        request.setAttribute("dataTo", birthdayTo);
        request.setAttribute("messageTo", messagebirthTo);
        RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
        rd.forward(request, response);
        return;
    }
    if (birthdayFrom != null && birthdayTo != null && !birthdayFrom.isEmpty() && !birthdayTo.isEmpty()) {
        request.setAttribute("birthDayFromFrom", birthdayFrom);
        request.setAttribute("birthDayToTo", birthdayTo);
        if (isValidDate(birthdayFrom) && isValidDate(birthdayTo)) {
            String dayFrom = birthdayFrom.replaceAll("/", "");
            String dayTo = birthdayTo.replaceAll("/", "");
            if (Integer.parseInt(dayTo) < Integer.parseInt(dayFrom)) {
                String messageFromTo = Constants.MESSAGE_ERROR_FROM_BIGGER_TO;
                request.setAttribute("errorFromTo", messageFromTo);
                RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
                rd.forward(request, response);
                return;
            }
        }
    }
}

private void deleteData(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    T002Dao daoSearch = new T002Dao();
    String[] ids = request.getParameterValues("selectedValues");
    if (ids != null && ids.length > 0) {
        String idList = String.join(",", ids);
        idList = idList.replace("[\"", "").replace("\"]", "");
        String result = idList.replaceAll("[^\\d,]", "").replace("\"", "");
        String[] result2 = result.split(",");
        if (result2.length == 16) {
            String[] result3 = Arrays.copyOfRange(result2, 1, result2.length);
            daoSearch.deleteData(result3);
        } else {
            for (int i = 0; i < result2.length; i++) {
                if (result2.length == 16) {
                    daoSearch.deleteData(result2);
                }
                daoSearch.deleteData(result2);
            }
        }
    }
}

private void paginateData(HttpServletRequest request, HttpServletResponse response, String name, String sex, String birthdayFrom, String birthdayTo) throws ServletException, IOException {
    String page = request.getParameter("pagepage");
    if (page == null || page.isEmpty()) {
        page = "1";
    }
    T002Dao dao
d
































protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		try {
			String name = request.getParameter("txtCustomerName");
			String sex = request.getParameter("browser");
			String birthdayFrom = request.getParameter("txtBirthdayFromName");
			String birthdayTo = request.getParameter("txtBirthdayToName");
			
				
			if (birthdayFrom != "" && birthdayFrom != null) {
				if (!isValidDate(birthdayFrom)) {
					String messagebirthdayfrom = Constants.MESSAGE_ERROR_FROM;
					String dataFrom = birthdayFrom;
					request.setAttribute("dataFrom", dataFrom);
					request.setAttribute("messageFrom", messagebirthdayfrom);
					RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
					rd.forward(request, response);
					return;
				}
			}
				
			if (birthdayTo != "" && birthdayTo != null) {
				if (!isValidDate(birthdayTo)) {
					String messagebirthTo = Constants.MESSAGE_ERROR_TO;
					String dataTo = birthdayTo;
					request.setAttribute("dataTo", dataTo);
					request.setAttribute("messageTo", messagebirthTo);
					RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
					rd.forward(request, response);
					return;
				}
			}
			
			if (birthdayFrom != "" && birthdayTo != "" && birthdayFrom != null && birthdayTo != null) {
				
				request.setAttribute("birthDayFromFrom", birthdayFrom);
				request.setAttribute("birthDayToTo", birthdayTo);
				if (isValidDate(birthdayFrom) && isValidDate(birthdayTo)) {
					String dayFrom = birthdayFrom.replaceAll("/", "");
					String dayTo = birthdayTo.replaceAll("/", "");
					
					if (Integer.parseInt(dayTo) < Integer.parseInt(dayFrom)) {
						String messageFromTo = Constants.MESSAGE_ERROR_FROM_BIGGER_TO;
						request.setAttribute("errorFromTo", messageFromTo);
						RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
						rd.forward(request, response);
						return;
					}
				}
			}
			
			T002Dao daoSearch = new T002Dao();
			String[] ids = request.getParameterValues("selectedValues");
			if (ids != null && ids.length > 0) {
			    String idList = String.join(",", ids);
			    idList = idList.replace("[\"", "").replace("\"]", "");
			    String result = idList.replaceAll("[^\\d,]", "").replace("\"", "");
			    String[] result2 = result.split(",");
			    if (result2.length == 16) {
			    	String[] result3 = Arrays.copyOfRange(result2, 1, result2.length);
		    		daoSearch.deleteData(result3);
			    }else {
			    	for (int i = 0;i< result2.length; i++) {
				    	if (result2.length == 16) {
				    		daoSearch.deleteData(result2);
				    	}
				    	daoSearch.deleteData(result2);
				    }
			    }
			}
			String page = request.getParameter("pagepage");
			if (page != null && page != "") {
				HttpSession session = request.getSession();
				String sex1 =(String) session.getAttribute("sex");
				String birthdayFrom1 =(String) session.getAttribute("birthdayFrom");
				String birthdayTo1 =(String) session.getAttribute("birthdayTo");
				List<T002Dto> resultSearch1 = daoSearch.getDataSearch(name, sex1, birthdayFrom1, birthdayTo1);
				
				int recordsPerPage = 15; // số phần tử hiển thị trên mỗi trang
				int startIndex = (Integer.parseInt(page)- 1) * recordsPerPage; // vị trí bắt đầu của trang hiện tại
				int endIndex = startIndex + recordsPerPage; // vị trí kết thúc của trang hiện tại
				int totalRecords = resultSearch1.size(); // tổng số phần tử của danh sách
				int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage); // tổng số trang
				List<T002Dto> resultPaginated = resultSearch1.subList(startIndex, Math.min(endIndex, totalRecords));
				request.setAttribute("listDataSearch", resultPaginated);
				request.setAttribute("currentPage", page);
				request.setAttribute("recordsPerPage", recordsPerPage);
				request.setAttribute("totalRecords", totalRecords);
				request.setAttribute("totalPages", totalPages);
				RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
				rd.forward(request, response);
				return;
			}
			
			if (page== null || page == "") {
				page = "1";
				List<T002Dto> resultSearch = daoSearch.getDataSearch(name, sex, birthdayFrom, birthdayTo);
				int recordsPerPage = 15; 
				int startIndex = (Integer.parseInt(page)- 1) * recordsPerPage; 
				int endIndex = startIndex + recordsPerPage; 
				int totalRecords = resultSearch.size(); 
				int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage); 
				List<T002Dto> resultPaginated = resultSearch.subList(startIndex, Math.min(endIndex, totalRecords));
				request.setAttribute("listDataSearch", resultPaginated);
				request.setAttribute("currentPage", page);
				request.setAttribute("recordsPerPage", recordsPerPage);
				request.setAttribute("totalRecords", totalRecords);
				request.setAttribute("totalPages", totalPages);
				HttpSession session = request.getSession();
				session.setAttribute("sex", sex);
				session.setAttribute("birthdayFrom", birthdayFrom);
				session.setAttribute("birthdayTo", birthdayTo);
				RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
				rd.forward(request, response);
				return;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		try {
			String name = request.getParameter("txtCustomerName");
			String sex = request.getParameter("browser");
			String birthdayFrom = request.getParameter("txtBirthdayFromName");
			String birthdayTo = request.getParameter("txtBirthdayToName");
			
				
			validateDates(request, response, birthdayFrom, birthdayTo);
			deleteData(request, response);
			T002Dao daoSearch = new T002Dao();
			String page = request.getParameter("pagepage");
			if (page != null && page != "") {
				HttpSession session = request.getSession();
				String sex1 =(String) session.getAttribute("sex");
				String birthdayFrom1 =(String) session.getAttribute("birthdayFrom");
				String birthdayTo1 =(String) session.getAttribute("birthdayTo");
				List<T002Dto> resultSearch1 = daoSearch.getDataSearch(name, sex1, birthdayFrom1, birthdayTo1);
				
				int recordsPerPage = 15; // số phần tử hiển thị trên mỗi trang
				int startIndex = (Integer.parseInt(page)- 1) * recordsPerPage; // vị trí bắt đầu của trang hiện tại
				int endIndex = startIndex + recordsPerPage; // vị trí kết thúc của trang hiện tại
				int totalRecords = resultSearch1.size(); // tổng số phần tử của danh sách
				int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage); // tổng số trang
				List<T002Dto> resultPaginated = resultSearch1.subList(startIndex, Math.min(endIndex, totalRecords));
				request.setAttribute("listDataSearch", resultPaginated);
				request.setAttribute("currentPage", page);
				request.setAttribute("recordsPerPage", recordsPerPage);
				request.setAttribute("totalRecords", totalRecords);
				request.setAttribute("totalPages", totalPages);
				RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
				rd.forward(request, response);
				return;
			}
			
			if (page== null || page == "") {
				page = "1";
				List<T002Dto> resultSearch = daoSearch.getDataSearch(name, sex, birthdayFrom, birthdayTo);
				int recordsPerPage = 15; 
				int startIndex = (Integer.parseInt(page)- 1) * recordsPerPage; 
				int endIndex = startIndex + recordsPerPage; 
				int totalRecords = resultSearch.size(); 
				int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage); 
				List<T002Dto> resultPaginated = resultSearch.subList(startIndex, Math.min(endIndex, totalRecords));
				request.setAttribute("listDataSearch", resultPaginated);
				request.setAttribute("currentPage", page);
				request.setAttribute("recordsPerPage", recordsPerPage);
				request.setAttribute("totalRecords", totalRecords);
				request.setAttribute("totalPages", totalPages);
				HttpSession session = request.getSession();
				session.setAttribute("sex", sex);
				session.setAttribute("birthdayFrom", birthdayFrom);
				session.setAttribute("birthdayTo", birthdayTo);
				RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/jsp/T002.jsp");
				rd.forward(request, response);
				return;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
